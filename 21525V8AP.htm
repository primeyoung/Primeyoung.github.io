<!doctype html>
<html data-n-head-ssr lang="en" data-n-head="%7B%22lang%22:%7B%22ssr%22:%22en%22%7D%7D">
  <head >
    <title>Dockerfile 指令学习总结</title><meta data-n-head="ssr" charset="utf-8"><meta data-n-head="ssr" name="viewport" content="width=device-width, initial-scale=1"><meta data-n-head="ssr" name="google-site-verification" content="_2Z6I2Wl5xuTKIGRrCD3meIZDgfn_XFVrTv1tKeJ6v8"><meta data-n-head="ssr" name="msvalidate.01" content="E02DDF417CA7C7D33A55805B3E9A81C7"><meta data-n-head="ssr" name="baidu-site-verification" content="code-7cRwEMlHAr"><meta data-n-head="ssr" data-hid="description" name="description" content="Dockerfile 描述了组装镜像的步骤，其中每条指令都是单独执行的。除了FROM指令，其他每一条指令都会在上一条指令所生成镜像的基础上执行，执行完后会生成一个新的镜像层，新的镜像层覆盖在原来的镜像"><meta data-n-head="ssr" data-hid="keywords" name="keywords" content="命令行,dockerfile,docker"><link data-n-head="ssr" rel="icon" type="image/x-icon" href="favicon.ico" tppabs="https://www.leafage.top/favicon.ico"><link data-n-head="ssr" rel="preconnect" href="https://www.google-analytics.com"><link data-n-head="ssr" rel="canonical" href="https://www.leafage.top/posts/detail/21525V8AP"><script data-n-head="ssr" src="hm.js-afb964e86bcad4267c09806a48c3ccbd.js" tppabs="https://hm.baidu.com/hm.js?afb964e86bcad4267c09806a48c3ccbd"></script><link rel="preload" href="/_nuxt/2dcea8e.js" as="script"><link rel="preload" href="/_nuxt/6a18bf6.js" as="script"><link rel="preload" href="/_nuxt/b1b6c93.js" as="script"><link rel="preload" href="/_nuxt/5f999ff.js" as="script"><link rel="preload" href="/_nuxt/6c4e3a2.js" as="script"><link rel="preload" href="/_nuxt/1318273.js" as="script"><style data-vue-ssr-id="54b08540:0 53f61d5f:0">/*! tailwindcss v2.1.2 | MIT License | https://tailwindcss.com*/

/*! modern-normalize v1.0.0 | MIT License | https://github.com/sindresorhus/modern-normalize */

/*
Document
========
*/

/**
Use a better box model (opinionated).
*/

*,
*::before,
*::after {
  box-sizing: border-box;
}

/**
Use a more readable tab size (opinionated).
*/

:root {
  -moz-tab-size: 4;
  -o-tab-size: 4;
     tab-size: 4;
}

/**
1. Correct the line height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
*/

html {
  line-height: 1.15; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/*
Sections
========
*/

/**
Remove the margin in all browsers.
*/

body {
  margin: 0;
}

/**
Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)
*/

body {
  font-family:
		system-ui,
		-apple-system, /* Firefox supports this but not yet `system-ui` */
		'Segoe UI',
		Roboto,
		Helvetica,
		Arial,
		sans-serif,
		'Apple Color Emoji',
		'Segoe UI Emoji';
}

/*
Grouping content
================
*/

/**
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
*/

hr {
  height: 0; /* 1 */
  color: inherit; /* 2 */
}

/*
Text-level semantics
====================
*/

/**
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr[title] {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/**
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/**
1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)
2. Correct the odd 'em' font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family:
		ui-monospace,
		SFMono-Regular,
		Consolas,
		'Liberation Mono',
		Menlo,
		monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/**
Prevent 'sub' and 'sup' elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
Tabular data
============
*/

/**
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
*/

table {
  text-indent: 0; /* 1 */
  border-color: inherit; /* 2 */
}

/*
Forms
=====
*/

/**
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
Remove the inheritance of text transform in Edge and Firefox.
1. Remove the inheritance of text transform in Firefox.
*/

button,
select { /* 1 */
  text-transform: none;
}

/**
Correct the inability to style clickable types in iOS and Safari.
*/

button,
[type='button'],
[type='submit'] {
  -webkit-appearance: button;
}

/**
Remove the inner border and padding in Firefox.
*/

/**
Restore the focus styles unset by the previous rule.
*/

/**
Remove the additional ':invalid' styles in Firefox.
See: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737
*/

/**
Remove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.
*/

legend {
  padding: 0;
}

/**
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/**
Correct the cursor style of increment and decrement buttons in Safari.
*/

/**
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
Remove the inner padding in Chrome and Safari on macOS.
*/

/**
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to 'inherit' in Safari.
*/

/*
Interactive
===========
*/

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/**
 * Manually forked from SUIT CSS Base: https://github.com/suitcss/base
 * A thin layer on top of normalize.css that provides a starting point more
 * suitable for web applications.
 */

/**
 * Removes the default spacing and border for appropriate elements.
 */

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

button {
  background-color: transparent;
  background-image: none;
}

/**
 * Work around a Firefox/IE bug where the transparent `button` background
 * results in a loss of the default `button` focus styles.
 */

button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color;
}

fieldset {
  margin: 0;
  padding: 0;
}

ol,
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

/**
 * Tailwind custom reset styles
 */

/**
 * 1. Use the user's configured `sans` font-family (with Tailwind's default
 *    sans-serif font stack as a fallback) as a sane default.
 * 2. Use Tailwind's default "normal" line-height so the user isn't forced
 *    to override it to ensure consistency even when using the default theme.
 */

html {
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 1 */
  line-height: 1.5; /* 2 */
}

/**
 * Inherit font-family and line-height from `html` so users can set them as
 * a class directly on the `html` element.
 */

body {
  font-family: inherit;
  line-height: inherit;
}

/**
 * 1. Prevent padding and border from affecting element width.
 *
 *    We used to set this in the html element and inherit from
 *    the parent element for everything else. This caused issues
 *    in shadow-dom-enhanced elements like <details> where the content
 *    is wrapped by a div with box-sizing set to `content-box`.
 *
 *    https://github.com/mozdevs/cssremedy/issues/4
 *
 *
 * 2. Allow adding a border to an element by just adding a border-width.
 *
 *    By default, the way the browser specifies that an element should have no
 *    border is by setting it's border-style to `none` in the user-agent
 *    stylesheet.
 *
 *    In order to easily add borders to elements by just setting the `border-width`
 *    property, we change the default border-style for all elements to `solid`, and
 *    use border-width to hide them instead. This way our `border` utilities only
 *    need to set the `border-width` property instead of the entire `border`
 *    shorthand, making our border utilities much more straightforward to compose.
 *
 *    https://github.com/tailwindcss/tailwindcss/pull/116
 */

*,
::before,
::after {
  box-sizing: border-box; /* 1 */
  border-width: 0; /* 2 */
  border-style: solid; /* 2 */
  border-color: #e5e7eb; /* 2 */
}

/*
 * Ensure horizontal rules are visible by default
 */

hr {
  border-top-width: 1px;
}

/**
 * Undo the `border-style: none` reset that Normalize applies to images so that
 * our `border-{width}` utilities have the expected effect.
 *
 * The Normalize reset is unnecessary for us since we default the border-width
 * to 0 on all elements.
 *
 * https://github.com/tailwindcss/tailwindcss/issues/362
 */

img {
  border-style: solid;
}

textarea {
  resize: vertical;
}

input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1;
  color: #9ca3af;
}

input:-ms-input-placeholder, textarea:-ms-input-placeholder {
  opacity: 1;
  color: #9ca3af;
}

input::placeholder,
textarea::placeholder {
  opacity: 1;
  color: #9ca3af;
}

button {
  cursor: pointer;
}

table {
  border-collapse: collapse;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/**
 * Reset links to optimize for opt-in styling instead of
 * opt-out.
 */

a {
  color: inherit;
  text-decoration: inherit;
}

/**
 * Reset form element properties that are easy to forget to
 * style explicitly so you don't inadvertently introduce
 * styles that deviate from your design system. These styles
 * supplement a partial reset that is already applied by
 * normalize.css.
 */

button,
input,
optgroup,
select,
textarea {
  padding: 0;
  line-height: inherit;
  color: inherit;
}

/**
 * Use the configured 'mono' font family for elements that
 * are expected to be rendered with a monospace font, falling
 * back to the system monospace stack if there is no configured
 * 'mono' font family.
 */

pre,
code,
kbd,
samp {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}

/**
 * Make replaced elements `display: block` by default as that's
 * the behavior you want almost all of the time. Inspired by
 * CSS Remedy, with `svg` added as well.
 *
 * https://github.com/mozdevs/cssremedy/issues/14
 */

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  vertical-align: middle;
}

/**
 * Constrain images and videos to the parent width and preserve
 * their intrinsic aspect ratio.
 *
 * https://github.com/mozdevs/cssremedy/issues/14
 */

img,
video {
  max-width: 100%;
  height: auto;
}

.container{
  width:100%;
}

@media (min-width: 640px){
  .container{
    max-width:640px;
  }
}

@media (min-width: 768px){
  .container{
    max-width:768px;
  }
}

@media (min-width: 1024px){
  .container{
    max-width:1024px;
  }
}

@media (min-width: 1280px){
  .container{
    max-width:1280px;
  }
}

@media (min-width: 1536px){
  .container{
    max-width:1536px;
  }
}

.prose{
  color:#374151;
  max-width:65ch;
}

.prose [class~="lead"]{
  color:#4b5563;
  font-size:1.25em;
  line-height:1.6;
  margin-top:1.2em;
  margin-bottom:1.2em;
}

.prose a{
  color:#111827;
  text-decoration:underline;
  font-weight:500;
}

.prose strong{
  color:#111827;
  font-weight:600;
}

.prose ol[type="a"]{
  --list-counter-style:lower-alpha;
}

.prose ol[type="a" s]{
  --list-counter-style:lower-alpha;
}

.prose ol[type="i"]{
  --list-counter-style:lower-roman;
}

.prose ol[type="i" s]{
  --list-counter-style:lower-roman;
}

.prose ol[type="1"]{
  --list-counter-style:decimal;
}

.prose ol > li{
  position:relative;
  padding-left:1.75em;
}

.prose ol > li::before{
  content:counter(list-item, var(--list-counter-style, decimal)) ".";
  position:absolute;
  font-weight:400;
  color:#6b7280;
  left:0;
}

.prose ul > li{
  position:relative;
  padding-left:1.75em;
}

.prose ul > li::before{
  content:"";
  position:absolute;
  background-color:#d1d5db;
  border-radius:50%;
  width:0.375em;
  height:0.375em;
  top:calc(0.875em - 0.1875em);
  left:0.25em;
}

.prose hr{
  border-color:#e5e7eb;
  border-top-width:1px;
  margin-top:3em;
  margin-bottom:3em;
}

.prose blockquote{
  font-weight:500;
  font-style:italic;
  color:#111827;
  border-left-width:0.25rem;
  border-left-color:#e5e7eb;
  quotes:"\201C""\201D""\2018""\2019";
  margin-top:1.6em;
  margin-bottom:1.6em;
  padding-left:1em;
}

.prose blockquote p:first-of-type::before{
  content:open-quote;
}

.prose blockquote p:last-of-type::after{
  content:close-quote;
}

.prose h1{
  color:#111827;
  font-weight:800;
  font-size:2.25em;
  margin-top:0;
  margin-bottom:0.8888889em;
  line-height:1.1111111;
}

.prose h2{
  color:#111827;
  font-weight:700;
  font-size:1.5em;
  margin-top:2em;
  margin-bottom:1em;
  line-height:1.3333333;
}

.prose h3{
  color:#111827;
  font-weight:600;
  font-size:1.25em;
  margin-top:1.6em;
  margin-bottom:0.6em;
  line-height:1.6;
}

.prose h4{
  color:#111827;
  font-weight:600;
  margin-top:1.5em;
  margin-bottom:0.5em;
  line-height:1.5;
}

.prose figure figcaption{
  color:#6b7280;
  font-size:0.875em;
  line-height:1.4285714;
  margin-top:0.8571429em;
}

.prose code{
  color:#111827;
  font-weight:600;
  font-size:0.875em;
}

.prose code::before{
  content:"`";
}

.prose code::after{
  content:"`";
}

.prose a code{
  color:#111827;
}

.prose pre{
  color:#e5e7eb;
  background-color:#1f2937;
  overflow-x:auto;
  font-size:0.875em;
  line-height:1.7142857;
  margin-top:1.7142857em;
  margin-bottom:1.7142857em;
  border-radius:0.375rem;
  padding-top:0.8571429em;
  padding-right:1.1428571em;
  padding-bottom:0.8571429em;
  padding-left:1.1428571em;
}

.prose pre code{
  background-color:transparent;
  border-width:0;
  border-radius:0;
  padding:0;
  font-weight:400;
  color:inherit;
  font-size:inherit;
  font-family:inherit;
  line-height:inherit;
}

.prose pre code::before{
  content:none;
}

.prose pre code::after{
  content:none;
}

.prose table{
  width:100%;
  table-layout:auto;
  text-align:left;
  margin-top:2em;
  margin-bottom:2em;
  font-size:0.875em;
  line-height:1.7142857;
}

.prose thead{
  color:#111827;
  font-weight:600;
  border-bottom-width:1px;
  border-bottom-color:#d1d5db;
}

.prose thead th{
  vertical-align:bottom;
  padding-right:0.5714286em;
  padding-bottom:0.5714286em;
  padding-left:0.5714286em;
}

.prose tbody tr{
  border-bottom-width:1px;
  border-bottom-color:#e5e7eb;
}

.prose tbody tr:last-child{
  border-bottom-width:0;
}

.prose tbody td{
  vertical-align:top;
  padding-top:0.5714286em;
  padding-right:0.5714286em;
  padding-bottom:0.5714286em;
  padding-left:0.5714286em;
}

.prose{
  font-size:1rem;
  line-height:1.75;
}

.prose p{
  margin-top:1.25em;
  margin-bottom:1.25em;
}

.prose img{
  margin-top:2em;
  margin-bottom:2em;
}

.prose video{
  margin-top:2em;
  margin-bottom:2em;
}

.prose figure{
  margin-top:2em;
  margin-bottom:2em;
}

.prose figure > *{
  margin-top:0;
  margin-bottom:0;
}

.prose h2 code{
  font-size:0.875em;
}

.prose h3 code{
  font-size:0.9em;
}

.prose ol{
  margin-top:1.25em;
  margin-bottom:1.25em;
}

.prose ul{
  margin-top:1.25em;
  margin-bottom:1.25em;
}

.prose li{
  margin-top:0.5em;
  margin-bottom:0.5em;
}

.prose > ul > li p{
  margin-top:0.75em;
  margin-bottom:0.75em;
}

.prose > ul > li > *:first-child{
  margin-top:1.25em;
}

.prose > ul > li > *:last-child{
  margin-bottom:1.25em;
}

.prose > ol > li > *:first-child{
  margin-top:1.25em;
}

.prose > ol > li > *:last-child{
  margin-bottom:1.25em;
}

.prose ul ul, .prose ul ol, .prose ol ul, .prose ol ol{
  margin-top:0.75em;
  margin-bottom:0.75em;
}

.prose hr + *{
  margin-top:0;
}

.prose h2 + *{
  margin-top:0;
}

.prose h3 + *{
  margin-top:0;
}

.prose h4 + *{
  margin-top:0;
}

.prose thead th:first-child{
  padding-left:0;
}

.prose thead th:last-child{
  padding-right:0;
}

.prose tbody td:first-child{
  padding-left:0;
}

.prose tbody td:last-child{
  padding-right:0;
}

.prose > :first-child{
  margin-top:0;
}

.prose > :last-child{
  margin-bottom:0;
}

.prose-sm{
  font-size:0.875rem;
  line-height:1.7142857;
}

.prose-sm p{
  margin-top:1.1428571em;
  margin-bottom:1.1428571em;
}

.prose-sm [class~="lead"]{
  font-size:1.2857143em;
  line-height:1.5555556;
  margin-top:0.8888889em;
  margin-bottom:0.8888889em;
}

.prose-sm blockquote{
  margin-top:1.3333333em;
  margin-bottom:1.3333333em;
  padding-left:1.1111111em;
}

.prose-sm h1{
  font-size:2.1428571em;
  margin-top:0;
  margin-bottom:0.8em;
  line-height:1.2;
}

.prose-sm h2{
  font-size:1.4285714em;
  margin-top:1.6em;
  margin-bottom:0.8em;
  line-height:1.4;
}

.prose-sm h3{
  font-size:1.2857143em;
  margin-top:1.5555556em;
  margin-bottom:0.4444444em;
  line-height:1.5555556;
}

.prose-sm h4{
  margin-top:1.4285714em;
  margin-bottom:0.5714286em;
  line-height:1.4285714;
}

.prose-sm img{
  margin-top:1.7142857em;
  margin-bottom:1.7142857em;
}

.prose-sm video{
  margin-top:1.7142857em;
  margin-bottom:1.7142857em;
}

.prose-sm figure{
  margin-top:1.7142857em;
  margin-bottom:1.7142857em;
}

.prose-sm figure > *{
  margin-top:0;
  margin-bottom:0;
}

.prose-sm figure figcaption{
  font-size:0.8571429em;
  line-height:1.3333333;
  margin-top:0.6666667em;
}

.prose-sm code{
  font-size:0.8571429em;
}

.prose-sm h2 code{
  font-size:0.9em;
}

.prose-sm h3 code{
  font-size:0.8888889em;
}

.prose-sm pre{
  font-size:0.8571429em;
  line-height:1.6666667;
  margin-top:1.6666667em;
  margin-bottom:1.6666667em;
  border-radius:0.25rem;
  padding-top:0.6666667em;
  padding-right:1em;
  padding-bottom:0.6666667em;
  padding-left:1em;
}

.prose-sm ol{
  margin-top:1.1428571em;
  margin-bottom:1.1428571em;
}

.prose-sm ul{
  margin-top:1.1428571em;
  margin-bottom:1.1428571em;
}

.prose-sm li{
  margin-top:0.2857143em;
  margin-bottom:0.2857143em;
}

.prose-sm ol > li{
  padding-left:1.5714286em;
}

.prose-sm ol > li::before{
  left:0;
}

.prose-sm ul > li{
  padding-left:1.5714286em;
}

.prose-sm ul > li::before{
  height:0.3571429em;
  width:0.3571429em;
  top:calc(0.8571429em - 0.1785714em);
  left:0.2142857em;
}

.prose-sm > ul > li p{
  margin-top:0.5714286em;
  margin-bottom:0.5714286em;
}

.prose-sm > ul > li > *:first-child{
  margin-top:1.1428571em;
}

.prose-sm > ul > li > *:last-child{
  margin-bottom:1.1428571em;
}

.prose-sm > ol > li > *:first-child{
  margin-top:1.1428571em;
}

.prose-sm > ol > li > *:last-child{
  margin-bottom:1.1428571em;
}

.prose-sm ul ul, .prose-sm ul ol, .prose-sm ol ul, .prose-sm ol ol{
  margin-top:0.5714286em;
  margin-bottom:0.5714286em;
}

.prose-sm hr{
  margin-top:2.8571429em;
  margin-bottom:2.8571429em;
}

.prose-sm hr + *{
  margin-top:0;
}

.prose-sm h2 + *{
  margin-top:0;
}

.prose-sm h3 + *{
  margin-top:0;
}

.prose-sm h4 + *{
  margin-top:0;
}

.prose-sm table{
  font-size:0.8571429em;
  line-height:1.5;
}

.prose-sm thead th{
  padding-right:1em;
  padding-bottom:0.6666667em;
  padding-left:1em;
}

.prose-sm thead th:first-child{
  padding-left:0;
}

.prose-sm thead th:last-child{
  padding-right:0;
}

.prose-sm tbody td{
  padding-top:0.6666667em;
  padding-right:1em;
  padding-bottom:0.6666667em;
  padding-left:1em;
}

.prose-sm tbody td:first-child{
  padding-left:0;
}

.prose-sm tbody td:last-child{
  padding-right:0;
}

.prose-sm > :first-child{
  margin-top:0;
}

.prose-sm > :last-child{
  margin-bottom:0;
}

.space-x-2 > :not([hidden]) ~ :not([hidden]){
  --tw-space-x-reverse:0;
  margin-right:calc(0.5rem * var(--tw-space-x-reverse));
  margin-left:calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));
}

.space-x-6 > :not([hidden]) ~ :not([hidden]){
  --tw-space-x-reverse:0;
  margin-right:calc(1.5rem * var(--tw-space-x-reverse));
  margin-left:calc(1.5rem * calc(1 - var(--tw-space-x-reverse)));
}

.space-x-10 > :not([hidden]) ~ :not([hidden]){
  --tw-space-x-reverse:0;
  margin-right:calc(2.5rem * var(--tw-space-x-reverse));
  margin-left:calc(2.5rem * calc(1 - var(--tw-space-x-reverse)));
}

.divide-y-2 > :not([hidden]) ~ :not([hidden]){
  --tw-divide-y-reverse:0;
  border-top-width:calc(2px * calc(1 - var(--tw-divide-y-reverse)));
  border-bottom-width:calc(2px * var(--tw-divide-y-reverse));
}

.divide-y > :not([hidden]) ~ :not([hidden]){
  --tw-divide-y-reverse:0;
  border-top-width:calc(1px * calc(1 - var(--tw-divide-y-reverse)));
  border-bottom-width:calc(1px * var(--tw-divide-y-reverse));
}

.divide-black > :not([hidden]) ~ :not([hidden]){
  --tw-divide-opacity:1;
  border-color:rgba(0, 0, 0, var(--tw-divide-opacity));
}

.divide-gray-300 > :not([hidden]) ~ :not([hidden]){
  --tw-divide-opacity:1;
  border-color:rgba(209, 213, 219, var(--tw-divide-opacity));
}

.divide-gray-400 > :not([hidden]) ~ :not([hidden]){
  --tw-divide-opacity:1;
  border-color:rgba(156, 163, 175, var(--tw-divide-opacity));
}

.divide-dotted > :not([hidden]) ~ :not([hidden]){
  border-style:dotted;
}

.bg-black{
  --tw-bg-opacity:1;
  background-color:rgba(0, 0, 0, var(--tw-bg-opacity));
}

.bg-white{
  --tw-bg-opacity:1;
  background-color:rgba(255, 255, 255, var(--tw-bg-opacity));
}

.bg-gray-50{
  --tw-bg-opacity:1;
  background-color:rgba(249, 250, 251, var(--tw-bg-opacity));
}

.bg-gray-100{
  --tw-bg-opacity:1;
  background-color:rgba(243, 244, 246, var(--tw-bg-opacity));
}

.bg-gray-200{
  --tw-bg-opacity:1;
  background-color:rgba(229, 231, 235, var(--tw-bg-opacity));
}

.bg-gray-500{
  --tw-bg-opacity:1;
  background-color:rgba(107, 114, 128, var(--tw-bg-opacity));
}

.bg-gray-800{
  --tw-bg-opacity:1;
  background-color:rgba(31, 41, 55, var(--tw-bg-opacity));
}

.hover\:bg-black:hover{
  --tw-bg-opacity:1;
  background-color:rgba(0, 0, 0, var(--tw-bg-opacity));
}

.bg-opacity-25{
  --tw-bg-opacity:0.25;
}

.bg-opacity-80{
  --tw-bg-opacity:0.8;
}

.border-black{
  --tw-border-opacity:1;
  border-color:rgba(0, 0, 0, var(--tw-border-opacity));
}

.border-gray-200{
  --tw-border-opacity:1;
  border-color:rgba(229, 231, 235, var(--tw-border-opacity));
}

.border-gray-300{
  --tw-border-opacity:1;
  border-color:rgba(209, 213, 219, var(--tw-border-opacity));
}

.border-gray-700{
  --tw-border-opacity:1;
  border-color:rgba(55, 65, 81, var(--tw-border-opacity));
}

.border-opacity-70{
  --tw-border-opacity:0.7;
}

.rounded{
  border-radius:0.25rem;
}

.rounded-md{
  border-radius:0.375rem;
}

.rounded-full{
  border-radius:9999px;
}

.border-solid{
  border-style:solid;
}

.border-2{
  border-width:2px;
}

.border{
  border-width:1px;
}

.border-b-2{
  border-bottom-width:2px;
}

.border-t{
  border-top-width:1px;
}

.cursor-pointer{
  cursor:pointer;
}

.flex{
  display:flex;
}

.table{
  display:table;
}

.grid{
  display:grid;
}

.hidden{
  display:none;
}

.items-center{
  align-items:center;
}

.justify-end{
  justify-content:flex-end;
}

.justify-center{
  justify-content:center;
}

.justify-between{
  justify-content:space-between;
}

.flex-1{
  flex:1 1 0%;
}

.float-right{
  float:right;
}

.font-light{
  font-weight:300;
}

.font-medium{
  font-weight:500;
}

.font-semibold{
  font-weight:600;
}

.font-bold{
  font-weight:700;
}

.font-extrabold{
  font-weight:800;
}

.font-black{
  font-weight:900;
}

.h-6{
  height:1.5rem;
}

.h-8{
  height:2rem;
}

.h-10{
  height:2.5rem;
}

.h-16{
  height:4rem;
}

.h-20{
  height:5rem;
}

.h-28{
  height:7rem;
}

.h-32{
  height:8rem;
}

.h-40{
  height:10rem;
}

.h-44{
  height:11rem;
}

.h-48{
  height:12rem;
}

.h-64{
  height:16rem;
}

.h-72{
  height:18rem;
}

.h-auto{
  height:auto;
}

.h-full{
  height:100%;
}

.text-xs{
  font-size:0.75rem;
  line-height:1rem;
}

.text-sm{
  font-size:0.875rem;
  line-height:1.25rem;
}

.text-lg{
  font-size:1.125rem;
  line-height:1.75rem;
}

.text-xl{
  font-size:1.25rem;
  line-height:1.75rem;
}

.text-3xl{
  font-size:1.875rem;
  line-height:2.25rem;
}

.text-4xl{
  font-size:2.25rem;
  line-height:2.5rem;
}

.text-6xl{
  font-size:3.75rem;
  line-height:1;
}

.leading-8{
  line-height:2rem;
}

.leading-relaxed{
  line-height:1.625;
}

.list-disc{
  list-style-type:disc;
}

.list-decimal{
  list-style-type:decimal;
}

.m-2{
  margin:0.5rem;
}

.my-2{
  margin-top:0.5rem;
  margin-bottom:0.5rem;
}

.my-3{
  margin-top:0.75rem;
  margin-bottom:0.75rem;
}

.my-4{
  margin-top:1rem;
  margin-bottom:1rem;
}

.mx-4{
  margin-left:1rem;
  margin-right:1rem;
}

.my-6{
  margin-top:1.5rem;
  margin-bottom:1.5rem;
}

.my-8{
  margin-top:2rem;
  margin-bottom:2rem;
}

.my-12{
  margin-top:3rem;
  margin-bottom:3rem;
}

.my-20{
  margin-top:5rem;
  margin-bottom:5rem;
}

.mx-auto{
  margin-left:auto;
  margin-right:auto;
}

.-my-2{
  margin-top:-0.5rem;
  margin-bottom:-0.5rem;
}

.mr-1{
  margin-right:0.25rem;
}

.mt-2{
  margin-top:0.5rem;
}

.mr-2{
  margin-right:0.5rem;
}

.mb-2{
  margin-bottom:0.5rem;
}

.mt-3{
  margin-top:0.75rem;
}

.mt-4{
  margin-top:1rem;
}

.mb-4{
  margin-bottom:1rem;
}

.ml-4{
  margin-left:1rem;
}

.mt-6{
  margin-top:1.5rem;
}

.ml-6{
  margin-left:1.5rem;
}

.mb-8{
  margin-bottom:2rem;
}

.ml-8{
  margin-left:2rem;
}

.mt-12{
  margin-top:3rem;
}

.mb-12{
  margin-bottom:3rem;
}

.mt-48{
  margin-top:12rem;
}

.-ml-1{
  margin-left:-0.25rem;
}

.-mt-3{
  margin-top:-0.75rem;
}

.-ml-4{
  margin-left:-1rem;
}

.-ml-10{
  margin-left:-2.5rem;
}

.min-w-full{
  min-width:100%;
}

.object-cover{
  -o-object-fit:cover;
     object-fit:cover;
}

.outline-none{
  outline:2px solid transparent;
  outline-offset:2px;
}

.focus\:outline-none:focus{
  outline:2px solid transparent;
  outline-offset:2px;
}

.overflow-auto{
  overflow:auto;
}

.overflow-hidden{
  overflow:hidden;
}

.p-2{
  padding:0.5rem;
}

.p-4{
  padding:1rem;
}

.p-6{
  padding:1.5rem;
}

.p-8{
  padding:2rem;
}

.py-2{
  padding-top:0.5rem;
  padding-bottom:0.5rem;
}

.px-2{
  padding-left:0.5rem;
  padding-right:0.5rem;
}

.py-3{
  padding-top:0.75rem;
  padding-bottom:0.75rem;
}

.py-4{
  padding-top:1rem;
  padding-bottom:1rem;
}

.px-4{
  padding-left:1rem;
  padding-right:1rem;
}

.py-8{
  padding-top:2rem;
  padding-bottom:2rem;
}

.px-8{
  padding-left:2rem;
  padding-right:2rem;
}

.py-20{
  padding-top:5rem;
  padding-bottom:5rem;
}

.pt-2{
  padding-top:0.5rem;
}

.pl-4{
  padding-left:1rem;
}

.placeholder-gray-600::-moz-placeholder{
  --tw-placeholder-opacity:1;
  color:rgba(75, 85, 99, var(--tw-placeholder-opacity));
}

.placeholder-gray-600:-ms-input-placeholder{
  --tw-placeholder-opacity:1;
  color:rgba(75, 85, 99, var(--tw-placeholder-opacity));
}

.placeholder-gray-600::placeholder{
  --tw-placeholder-opacity:1;
  color:rgba(75, 85, 99, var(--tw-placeholder-opacity));
}

.fixed{
  position:fixed;
}

.absolute{
  position:absolute;
}

.relative{
  position:relative;
}

.top-0{
  top:0px;
}

.right-0{
  right:0px;
}

.bottom-0{
  bottom:0px;
}

.bottom-4{
  bottom:1rem;
}

.bottom-8{
  bottom:2rem;
}

*{
  --tw-shadow:0 0 #0000;
}

*{
  --tw-ring-inset:var(--tw-empty,/*!*/ /*!*/);
  --tw-ring-offset-width:0px;
  --tw-ring-offset-color:#fff;
  --tw-ring-color:rgba(59, 130, 246, 0.5);
  --tw-ring-offset-shadow:0 0 #0000;
  --tw-ring-shadow:0 0 #0000;
}

.focus\:ring-1:focus{
  --tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
  --tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);
  box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
}

.hover\:fill-current:hover{
  fill:currentColor;
}

.text-left{
  text-align:left;
}

.text-center{
  text-align:center;
}

.text-black{
  --tw-text-opacity:1;
  color:rgba(0, 0, 0, var(--tw-text-opacity));
}

.text-white{
  --tw-text-opacity:1;
  color:rgba(255, 255, 255, var(--tw-text-opacity));
}

.text-gray-400{
  --tw-text-opacity:1;
  color:rgba(156, 163, 175, var(--tw-text-opacity));
}

.text-gray-500{
  --tw-text-opacity:1;
  color:rgba(107, 114, 128, var(--tw-text-opacity));
}

.text-gray-600{
  --tw-text-opacity:1;
  color:rgba(75, 85, 99, var(--tw-text-opacity));
}

.hover\:text-white:hover{
  --tw-text-opacity:1;
  color:rgba(255, 255, 255, var(--tw-text-opacity));
}

.uppercase{
  text-transform:uppercase;
}

.tracking-wide{
  letter-spacing:0.025em;
}

.tracking-wider{
  letter-spacing:0.05em;
}

.tracking-widest{
  letter-spacing:0.1em;
}

.w-6{
  width:1.5rem;
}

.w-8{
  width:2rem;
}

.w-16{
  width:4rem;
}

.w-28{
  width:7rem;
}

.w-32{
  width:8rem;
}

.w-48{
  width:12rem;
}

.w-auto{
  width:auto;
}

.w-1\/2{
  width:50%;
}

.w-1\/3{
  width:33.333333%;
}

.w-full{
  width:100%;
}

.z-10{
  z-index:10;
}

.gap-4{
  gap:1rem;
}

.grid-flow-row{
  grid-auto-flow:row;
}

.grid-flow-col{
  grid-auto-flow:column;
}

.grid-cols-1{
  grid-template-columns:repeat(1, minmax(0, 1fr));
}

.grid-cols-2{
  grid-template-columns:repeat(2, minmax(0, 1fr));
}

.grid-cols-3{
  grid-template-columns:repeat(3, minmax(0, 1fr));
}

.col-span-1{
  grid-column:span 1 / span 1;
}

.col-span-2{
  grid-column:span 2 / span 2;
}

.grid-rows-1{
  grid-template-rows:repeat(1, minmax(0, 1fr));
}

.grid-rows-2{
  grid-template-rows:repeat(2, minmax(0, 1fr));
}

.grid-rows-3{
  grid-template-rows:repeat(3, minmax(0, 1fr));
}

.grid-rows-4{
  grid-template-rows:repeat(4, minmax(0, 1fr));
}

.grid-rows-6{
  grid-template-rows:repeat(6, minmax(0, 1fr));
}

.transform{
  --tw-translate-x:0;
  --tw-translate-y:0;
  --tw-rotate:0;
  --tw-skew-x:0;
  --tw-skew-y:0;
  --tw-scale-x:1;
  --tw-scale-y:1;
  transform:translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

.hover\:scale-110:hover{
  --tw-scale-x:1.1;
  --tw-scale-y:1.1;
}

.hover\:scale-150:hover{
  --tw-scale-x:1.5;
  --tw-scale-y:1.5;
}

.hover\:translate-x-2:hover{
  --tw-translate-x:0.5rem;
}

.hover\:-translate-x-2:hover{
  --tw-translate-x:-0.5rem;
}

.transition{
  transition-property:background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-backdrop-filter;
  transition-property:background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  transition-property:background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter;
  transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration:150ms;
}

.duration-300{
  transition-duration:300ms;
}

.duration-500{
  transition-duration:500ms;
}

@-webkit-keyframes spin{
  to{
    transform:rotate(360deg);
  }
}

@keyframes spin{
  to{
    transform:rotate(360deg);
  }
}

@-webkit-keyframes ping{
  75%, 100%{
    transform:scale(2);
    opacity:0;
  }
}

@keyframes ping{
  75%, 100%{
    transform:scale(2);
    opacity:0;
  }
}

@-webkit-keyframes pulse{
  50%{
    opacity:.5;
  }
}

@keyframes pulse{
  50%{
    opacity:.5;
  }
}

@-webkit-keyframes bounce{
  0%, 100%{
    transform:translateY(-25%);
    -webkit-animation-timing-function:cubic-bezier(0.8,0,1,1);
            animation-timing-function:cubic-bezier(0.8,0,1,1);
  }

  50%{
    transform:none;
    -webkit-animation-timing-function:cubic-bezier(0,0,0.2,1);
            animation-timing-function:cubic-bezier(0,0,0.2,1);
  }
}

@keyframes bounce{
  0%, 100%{
    transform:translateY(-25%);
    -webkit-animation-timing-function:cubic-bezier(0.8,0,1,1);
            animation-timing-function:cubic-bezier(0.8,0,1,1);
  }

  50%{
    transform:none;
    -webkit-animation-timing-function:cubic-bezier(0,0,0.2,1);
            animation-timing-function:cubic-bezier(0,0,0.2,1);
  }
}

@media (min-width: 640px){
  .sm\:block{
    display:block;
  }

  .sm\:h-32{
    height:8rem;
  }

  .sm\:my-4{
    margin-top:1rem;
    margin-bottom:1rem;
  }

  .sm\:w-64{
    width:16rem;
  }
}

@media (min-width: 768px){
  .md\:prose{
    color:#374151;
    max-width:65ch;
  }

  .md\:prose [class~="lead"]{
    color:#4b5563;
    font-size:1.25em;
    line-height:1.6;
    margin-top:1.2em;
    margin-bottom:1.2em;
  }

  .md\:prose a{
    color:#111827;
    text-decoration:underline;
    font-weight:500;
  }

  .md\:prose strong{
    color:#111827;
    font-weight:600;
  }

  .md\:prose ol[type="a"]{
    --list-counter-style:lower-alpha;
  }

  .md\:prose ol[type="a" s]{
    --list-counter-style:lower-alpha;
  }

  .md\:prose ol[type="i"]{
    --list-counter-style:lower-roman;
  }

  .md\:prose ol[type="i" s]{
    --list-counter-style:lower-roman;
  }

  .md\:prose ol[type="1"]{
    --list-counter-style:decimal;
  }

  .md\:prose ol > li{
    position:relative;
    padding-left:1.75em;
  }

  .md\:prose ol > li::before{
    content:counter(list-item, var(--list-counter-style, decimal)) ".";
    position:absolute;
    font-weight:400;
    color:#6b7280;
    left:0;
  }

  .md\:prose ul > li{
    position:relative;
    padding-left:1.75em;
  }

  .md\:prose ul > li::before{
    content:"";
    position:absolute;
    background-color:#d1d5db;
    border-radius:50%;
    width:0.375em;
    height:0.375em;
    top:calc(0.875em - 0.1875em);
    left:0.25em;
  }

  .md\:prose hr{
    border-color:#e5e7eb;
    border-top-width:1px;
    margin-top:3em;
    margin-bottom:3em;
  }

  .md\:prose blockquote{
    font-weight:500;
    font-style:italic;
    color:#111827;
    border-left-width:0.25rem;
    border-left-color:#e5e7eb;
    quotes:"\201C""\201D""\2018""\2019";
    margin-top:1.6em;
    margin-bottom:1.6em;
    padding-left:1em;
  }

  .md\:prose blockquote p:first-of-type::before{
    content:open-quote;
  }

  .md\:prose blockquote p:last-of-type::after{
    content:close-quote;
  }

  .md\:prose h1{
    color:#111827;
    font-weight:800;
    font-size:2.25em;
    margin-top:0;
    margin-bottom:0.8888889em;
    line-height:1.1111111;
  }

  .md\:prose h2{
    color:#111827;
    font-weight:700;
    font-size:1.5em;
    margin-top:2em;
    margin-bottom:1em;
    line-height:1.3333333;
  }

  .md\:prose h3{
    color:#111827;
    font-weight:600;
    font-size:1.25em;
    margin-top:1.6em;
    margin-bottom:0.6em;
    line-height:1.6;
  }

  .md\:prose h4{
    color:#111827;
    font-weight:600;
    margin-top:1.5em;
    margin-bottom:0.5em;
    line-height:1.5;
  }

  .md\:prose figure figcaption{
    color:#6b7280;
    font-size:0.875em;
    line-height:1.4285714;
    margin-top:0.8571429em;
  }

  .md\:prose code{
    color:#111827;
    font-weight:600;
    font-size:0.875em;
  }

  .md\:prose code::before{
    content:"`";
  }

  .md\:prose code::after{
    content:"`";
  }

  .md\:prose a code{
    color:#111827;
  }

  .md\:prose pre{
    color:#e5e7eb;
    background-color:#1f2937;
    overflow-x:auto;
    font-size:0.875em;
    line-height:1.7142857;
    margin-top:1.7142857em;
    margin-bottom:1.7142857em;
    border-radius:0.375rem;
    padding-top:0.8571429em;
    padding-right:1.1428571em;
    padding-bottom:0.8571429em;
    padding-left:1.1428571em;
  }

  .md\:prose pre code{
    background-color:transparent;
    border-width:0;
    border-radius:0;
    padding:0;
    font-weight:400;
    color:inherit;
    font-size:inherit;
    font-family:inherit;
    line-height:inherit;
  }

  .md\:prose pre code::before{
    content:none;
  }

  .md\:prose pre code::after{
    content:none;
  }

  .md\:prose table{
    width:100%;
    table-layout:auto;
    text-align:left;
    margin-top:2em;
    margin-bottom:2em;
    font-size:0.875em;
    line-height:1.7142857;
  }

  .md\:prose thead{
    color:#111827;
    font-weight:600;
    border-bottom-width:1px;
    border-bottom-color:#d1d5db;
  }

  .md\:prose thead th{
    vertical-align:bottom;
    padding-right:0.5714286em;
    padding-bottom:0.5714286em;
    padding-left:0.5714286em;
  }

  .md\:prose tbody tr{
    border-bottom-width:1px;
    border-bottom-color:#e5e7eb;
  }

  .md\:prose tbody tr:last-child{
    border-bottom-width:0;
  }

  .md\:prose tbody td{
    vertical-align:top;
    padding-top:0.5714286em;
    padding-right:0.5714286em;
    padding-bottom:0.5714286em;
    padding-left:0.5714286em;
  }

  .md\:prose{
    font-size:1rem;
    line-height:1.75;
  }

  .md\:prose p{
    margin-top:1.25em;
    margin-bottom:1.25em;
  }

  .md\:prose img{
    margin-top:2em;
    margin-bottom:2em;
  }

  .md\:prose video{
    margin-top:2em;
    margin-bottom:2em;
  }

  .md\:prose figure{
    margin-top:2em;
    margin-bottom:2em;
  }

  .md\:prose figure > *{
    margin-top:0;
    margin-bottom:0;
  }

  .md\:prose h2 code{
    font-size:0.875em;
  }

  .md\:prose h3 code{
    font-size:0.9em;
  }

  .md\:prose ol{
    margin-top:1.25em;
    margin-bottom:1.25em;
  }

  .md\:prose ul{
    margin-top:1.25em;
    margin-bottom:1.25em;
  }

  .md\:prose li{
    margin-top:0.5em;
    margin-bottom:0.5em;
  }

  .md\:prose > ul > li p{
    margin-top:0.75em;
    margin-bottom:0.75em;
  }

  .md\:prose > ul > li > *:first-child{
    margin-top:1.25em;
  }

  .md\:prose > ul > li > *:last-child{
    margin-bottom:1.25em;
  }

  .md\:prose > ol > li > *:first-child{
    margin-top:1.25em;
  }

  .md\:prose > ol > li > *:last-child{
    margin-bottom:1.25em;
  }

  .md\:prose ul ul, .md\:prose ul ol, .md\:prose ol ul, .md\:prose ol ol{
    margin-top:0.75em;
    margin-bottom:0.75em;
  }

  .md\:prose hr + *{
    margin-top:0;
  }

  .md\:prose h2 + *{
    margin-top:0;
  }

  .md\:prose h3 + *{
    margin-top:0;
  }

  .md\:prose h4 + *{
    margin-top:0;
  }

  .md\:prose thead th:first-child{
    padding-left:0;
  }

  .md\:prose thead th:last-child{
    padding-right:0;
  }

  .md\:prose tbody td:first-child{
    padding-left:0;
  }

  .md\:prose tbody td:last-child{
    padding-right:0;
  }

  .md\:prose > :first-child{
    margin-top:0;
  }

  .md\:prose > :last-child{
    margin-bottom:0;
  }

  .md\:space-x-6 > :not([hidden]) ~ :not([hidden]){
    --tw-space-x-reverse:0;
    margin-right:calc(1.5rem * var(--tw-space-x-reverse));
    margin-left:calc(1.5rem * calc(1 - var(--tw-space-x-reverse)));
  }

  .md\:block{
    display:block;
  }

  .md\:flex{
    display:flex;
  }

  .md\:hidden{
    display:none;
  }

  .md\:justify-start{
    justify-content:flex-start;
  }

  .md\:justify-between{
    justify-content:space-between;
  }

  .md\:flex-1{
    flex:1 1 0%;
  }

  .md\:h-32{
    height:8rem;
  }

  .md\:h-40{
    height:10rem;
  }

  .md\:h-64{
    height:16rem;
  }

  .md\:h-full{
    height:100%;
  }

  .md\:text-xl{
    font-size:1.25rem;
    line-height:1.75rem;
  }

  .md\:text-3xl{
    font-size:1.875rem;
    line-height:2.25rem;
  }

  .md\:my-10{
    margin-top:2.5rem;
    margin-bottom:2.5rem;
  }

  .md\:ml-4{
    margin-left:1rem;
  }

  .md\:mt-12{
    margin-top:3rem;
  }

  .md\:ml-20{
    margin-left:5rem;
  }

  .md\:p-6{
    padding:1.5rem;
  }

  .md\:p-10{
    padding:2.5rem;
  }

  .md\:py-5{
    padding-top:1.25rem;
    padding-bottom:1.25rem;
  }

  .md\:px-8{
    padding-left:2rem;
    padding-right:2rem;
  }

  .md\:px-12{
    padding-left:3rem;
    padding-right:3rem;
  }

  .md\:px-20{
    padding-left:5rem;
    padding-right:5rem;
  }

  .md\:bottom-8{
    bottom:2rem;
  }

  .md\:w-1\/2{
    width:50%;
  }

  .md\:w-2\/5{
    width:40%;
  }

  .md\:w-3\/5{
    width:60%;
  }

  .md\:gap-6{
    gap:1.5rem;
  }

  .md\:gap-8{
    gap:2rem;
  }

  .md\:gap-x-6{
    -moz-column-gap:1.5rem;
         column-gap:1.5rem;
  }

  .md\:grid-cols-2{
    grid-template-columns:repeat(2, minmax(0, 1fr));
  }

  .md\:grid-cols-3{
    grid-template-columns:repeat(3, minmax(0, 1fr));
  }

  .md\:grid-cols-4{
    grid-template-columns:repeat(4, minmax(0, 1fr));
  }

  .md\:col-span-2{
    grid-column:span 2 / span 2;
  }

  .md\:grid-rows-1{
    grid-template-rows:repeat(1, minmax(0, 1fr));
  }

  .md\:grid-rows-2{
    grid-template-rows:repeat(2, minmax(0, 1fr));
  }

  .md\:grid-rows-3{
    grid-template-rows:repeat(3, minmax(0, 1fr));
  }

  .md\:row-span-2{
    grid-row:span 2 / span 2;
  }
}

@media (min-width: 1024px){
  .lg\:block{
    display:block;
  }

  .lg\:flex{
    display:flex;
  }

  .lg\:hidden{
    display:none;
  }

  .lg\:justify-end{
    justify-content:flex-end;
  }

  .lg\:text-3xl{
    font-size:1.875rem;
    line-height:2.25rem;
  }

  .lg\:mr-0{
    margin-right:0px;
  }

  .lg\:ml-12{
    margin-left:3rem;
  }

  .lg\:px-16{
    padding-left:4rem;
    padding-right:4rem;
  }

  .lg\:px-40{
    padding-left:10rem;
    padding-right:10rem;
  }

  .lg\:text-left{
    text-align:left;
  }

  .lg\:gap-8{
    gap:2rem;
  }

  .lg\:grid-cols-3{
    grid-template-columns:repeat(3, minmax(0, 1fr));
  }

  .lg\:col-span-2{
    grid-column:span 2 / span 2;
  }
}

@media (min-width: 1280px){
  .xl\:px-20{
    padding-left:5rem;
    padding-right:5rem;
  }

  .xl\:px-56{
    padding-left:14rem;
    padding-right:14rem;
  }

  .xl\:grid-cols-4{
    grid-template-columns:repeat(4, minmax(0, 1fr));
  }
}

@media (min-width: 1536px){
  .\32xl\:h-48{
    height:12rem;
  }
}
.nuxt-progress{
  position:fixed;
  top:0;
  left:0;
  right:0;
  height:2px;
  width:0;
  opacity:1;
  transition:width .1s,opacity .4s;
  background-color:#000;
  z-index:999999
}
.nuxt-progress.nuxt-progress-notransition{
  transition:none
}
.nuxt-progress-failed{
  background-color:red
}</style>
  </head>
  <body >
    <div data-server-rendered="true" id="__leafage"><!----><div id="__layout"><div id="app"><header><div class="container mx-auto px-2 md:px-12 lg:px-16 xl:px-20"><div class="flex justify-between md:justify-start items-center border-black border-b-2 py-3 md:py-5"><nav class="hidden md:flex space-x-6 tracking-wide text-xs text-black uppercase"><a href="index.htm" tppabs="https://www.leafage.top/" title="home" class="font-extrabold nuxt-link-active">
          Home
        </a> <a href="portfolio.htm" tppabs="https://www.leafage.top/portfolio" title="portfolio" class="font-extrabold">
          Portfolio
        </a> <a href="about.htm" tppabs="https://www.leafage.top/about" title="about" class="font-extrabold">
          About
        </a> <a href="contact.htm" tppabs="https://www.leafage.top/contact" title="contact" class="text-xs font-extrabold uppercase text-black">
          Contact
        </a></nav> <div class="-my-2 md:hidden"><button type="button" aria-label="openMenu" class="m-2 items-center justify-center focus:outline-none"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="black" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg></button></div> <div class="flex items-center justify-end md:flex-1"><a title="subscribe" href="#" rel="noopener" aria-label="subscribe" class="text-gray-600 flex items-center uppercase text-xs font-bold tracking-wide"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-mail mr-1" style="display: unset"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path> <polyline points="22,6 12,13 2,6"></polyline></svg>
          Subscribe
        </a> <a title="searchOpen" href="javascript:;" aria-label="searchOpen" class="ml-8 mr-2 lg:mr-0"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle> <line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg></a></div></div> <div class="flex justify-center items-center h-32 md:h-40"><a href="index.htm" tppabs="https://www.leafage.top/" class="text-4xl tracking-widest font-black uppercase text-black nuxt-link-active"><img src="logo-only.png" tppabs="https://www.leafage.top/logo-only.png" alt="Leafage" class="w-16 h-16 mx-auto"> <h1>Leafage</h1></a></div> <div class="px-2 mb-8" style="display:none;"><ul class="divide-y divide-black font-extrabold uppercase text-center"><li class="my-2"><a href="index.htm" tppabs="https://www.leafage.top/" title="home_mobile" class="nuxt-link-active">Home</a></li> <li class="my-2 pt-2"><a href="portfolio.htm" tppabs="https://www.leafage.top/portfolio" title="portfolio_mobile">Portfolio</a></li> <li class="my-2 pt-2"><a href="about.htm" tppabs="https://www.leafage.top/about" title="about_mobile">About</a></li> <li class="my-2 pt-2"><a href="contact.htm" tppabs="https://www.leafage.top/contact" title="contact_mobile">Contact</a></li></ul></div> <div class="fixed bg-black bg-opacity-80 top-0 right-0 w-full h-full z-10" style="display:none;"><div class="conatiner mx-auto px-8 md:px-20 lg:px-40 xl:px-56"><form><div class="flex justify-center items-center mt-48 w-full"><input type="text" placeholder="Enter The Keywords" value="" class="p-2 px-4 w-full -ml-4 focus:outline-none rounded-md"> <button type="submit" aria-label="search" class="-ml-10 focus:outline-none"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#6d6d6d" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle> <line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg></button></div></form> <a title="search" href="javascript:;" class="absolute mt-2 mr-2 top-0 right-0"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x"><line x1="18" y1="6" x2="6" y2="18"></line> <line x1="6" y1="6" x2="18" y2="18"></line></svg></a> <ul class="mt-2"><li class="flex items-center bg-gray-50 h-20 rounded-md"><span class="mx-auto">没有找到匹配的结果</span></li></ul></div></div></div></header> <main><div class="container mx-auto px-2 md:px-12 lg:px-16 xl:px-20"><div class="border-t border-black"></div> <div class="grid grid-flow-row grid-cols-1 lg:grid-cols-3 mt-12"><div class="lg:col-span-2"><article><ul class="flex text-sm font-bold space-x-6 text-gray-600 uppercase mb-4 -mt-3"><li><a href="posts-category=Technology.htm" tppabs="https://www.leafage.top/posts?category=Technology" title="Technology">Technology</a></li> <li class="tracking-wider">5/26/2021</li> <li class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-eye mr-1"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path> <circle cx="12" cy="12" r="3"></circle></svg>17
          </li> <li class="flex items-center cursor-pointer"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-heart mr-1 transform hover:scale-150 hover:fill-current transition duration-300"><path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path></svg>0
          </li></ul> <h2 class="my-3 text-xl md:text-3xl font-extrabold">Dockerfile 指令学习总结</h2> <figure class="w-full h-full my-8" style="display:;"><img src="box-1995679.jpg" tppabs="https://cdn.leafage.top/box-1995679.jpg" alt="Dockerfile 指令学习总结" class="w-full"></figure> <div class="prose min-w-full"><h1>Dockerfile</h1>
<p>Dockerfile 描述了组装镜像的步骤，其中每条指令都是单独执行的。除了FROM指令，其他每一条指令都会在上一条指令所生成镜像的基础上执行，执行完后会生成一个新的镜像层，新的镜像层覆盖在原来的镜像之上从而形成了新的镜像。Dockerfile所生成的最终镜像就是在基础镜像上面叠加一层层的镜像层组件的。Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。</p>
<p>Dockerfile 中指令不区分大小写，以 “#” 开头的是注释行，而在其他位置出现的 “#” 会被当成参数。</p>
<h4>基础示例：</h4>
<pre class="hljs"><code><span class="hljs-comment"># 基础镜像</span>
<span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine AS openjdk8
<span class="hljs-comment"># 维护者信息</span>
<span class="hljs-keyword">LABEL</span><span class="bash"> maintainer=<span class="hljs-string">&quot;liwenqiang@tseveryday.com&quot;</span></span>
<span class="hljs-comment"># 镜像操作指令</span>
<span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;JAVA_HOME&quot;</span></span>
<span class="hljs-comment"># 容器启动时执行的指令</span>
<span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;java -version&quot;</span>]</span>
</code></pre>
<p><strong>基础镜像推荐使用alpine版本的，这个会使得基础镜像很轻</strong></p>
<p>非alpine版本的镜像：</p>
<p><img src="03104308_v1le.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104308_v1le.jpg" alt="image.png" /></p>
<p>alpine版本的镜像：</p>
<p><img src="03104309_pYZA.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104309_pYZA.jpg" alt="image.png" /></p>
<p>执行<code>docker build .</code>来构建镜像</p>
<h4>执行结果：</h4>
<p><img src="03104309_GkEt.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104309_GkEt.jpg" alt="image.png" /></p>
<h4>示例执行结果说明：</h4>
<p>通过执行结果可以看到，第一次构建，没有基础镜像openjdk:8-jdk-alpine，自动去docker hub上拉取镜像。</p>
<ol>
<li>
<p><font color=red>红色框：</font><br />
docker在上一条命令构建的基础镜像之上运行一个临时容器，然后执行每一条指令，指令会对临时容器进行修改，将修改后的临时容器提交一个作为下一条命令执行的新的镜像层，然后将临时容器删除。</p>
</li>
<li>
<p><font color=deepskyblue>蓝色框：</font><br />
蓝色框中有一行显示&quot;JAVA_HOME&quot;，这个是Dockerfile中<code>RUN</code>指令再构建镜像时执行的。</p>
</li>
</ol>
<h2>FROM指令：</h2>
<pre class="hljs"><code><span class="hljs-keyword">FROM</span> &lt;image&gt; [AS &lt;name&gt;]
<span class="hljs-keyword">FROM</span> &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]
<span class="hljs-keyword">FROM</span> &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]
</code></pre>
<blockquote>
<p><code>FROM</code>是一个镜像构建开始的第一条指令，而非必须是Dockerfile文件的第一行非注释指令。</p>
</blockquote>
<h4>使用说明：</h4>
<ol>
<li>
<p><code>FROM</code>之前可以有其他指令，这个指令就是<code>ARG</code>，并且是唯一一个可声明在<code>FROM</code>之前的指令，声明在<code>FROM</code>之前的<code>ARG</code>指令，因为在构建之外，所以不能在<code>FROM</code>之后的任何地方使用，在<code>FROM</code>指令前声明的<code>ARG</code>指令需要指定默认值，在构建体中使用<code>ARG</code>指令可以不用指定默认值；</p>
</li>
<li>
<p>若<code>FROM</code>指令中的参数<code>&lt;tag&gt;</code>或<code>&lt;digest&gt;</code>为空，则默认为latest，如果<code>&lt;image&gt;</code>或<code>&lt;tag&gt;</code>指定的镜像不存在，则返回错误。</p>
</li>
</ol>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-keyword">ARG</span> VERSION=<span class="hljs-number">8</span>-jdk-alpine
<span class="hljs-comment"># 基础镜像</span>
<span class="hljs-keyword">FROM</span> openjdk:$VERSION
<span class="hljs-comment"># 维护者信息</span>
<span class="hljs-keyword">LABEL</span><span class="bash"> maintainer=<span class="hljs-string">&quot;liwenqiang@tseveryday.com&quot;</span></span>
<span class="hljs-comment"># 镜像操作指令</span>
<span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;JAVA_HOME&quot;</span></span>
<span class="hljs-comment"># 容器启动时执行的指令</span>
<span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;java -version&quot;</span>]</span>
</code></pre>
<h4>执行结果：</h4>
<p><img src="03104309_yeoh.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104309_yeoh.jpg" alt="image.png" /></p>
<h4>示例执行结果说明：</h4>
<ol>
<li>Step 1/5 显示结果可以看到指定了VERSION，且在<code>FROM</code>指令执行时，直接使用了ARG指令创建的变量；</li>
<li>与上面执行结果不同的是，<code>FROM</code>后面没有Pull 相关的信息，因为之前同版本的jdk镜像已经在本地镜像库中存在，docker会直接复用，而不是在重新拉去。</li>
</ol>
<p>构建完成之后，执行<code>doker images</code> 命令查看镜像信息；<br />
<img src="03104309_sxXF.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104309_sxXF.jpg" alt="image.png" />从结果中可以看到，openjdk的镜像只有一个，且版本号是8-jdk-alpine，关于新创建的镜像没有REPOSITORY和TAG后面再做说明；</p>
<h3>FROM多阶段构建：</h3>
<p>在17.05版本之前的Docker，只允许Dockerfile中出现一个<code>FROM</code>指令，但在此之后，可以在一个Dockerfile中出现多个<code>FROM</code>用来实现多阶段构建。</p>
<h4>使用说明：</h4>
<p>每一条 <code>FROM</code> 指令都是一个构建阶段，多条 <code>FROM</code> 就是多阶段构建，虽然最后生成的镜像只能是最后一个阶段的结果，但是，能够将前置阶段中的文件拷贝到后边的阶段中，这就是多阶段构建的最大意义。</p>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-comment"># 第一阶段构建，设置基础镜像，并设置别名在其他构建阶段可以直接使用</span>
<span class="hljs-keyword">FROM</span> maven:<span class="hljs-number">3</span>-jdk-<span class="hljs-number">8</span>-alpine AS maven-latest
<span class="hljs-comment"># 维护者信息</span>
<span class="hljs-keyword">LABEL</span><span class="bash"> maintainer=<span class="hljs-string">&quot;liwenqiang@tseveryday.com&quot;</span></span>
<span class="hljs-comment"># 设置工作空间，后续命令会在此目录下执行</span>
<span class="hljs-keyword">WORKDIR</span><span class="bash"> /app</span>
<span class="hljs-comment"># 添加文件到容器中</span>
<span class="hljs-keyword">ADD</span><span class="bash"> . /app/</span>
<span class="hljs-comment"># 执行打包命令</span>
<span class="hljs-keyword">RUN</span><span class="bash"> mvn clean package</span>

<span class="hljs-comment"># 第二阶段构建，以第一阶段构建为基础，再次进行构建步骤</span>
<span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine
<span class="hljs-comment"># 从第一阶段复制结果</span>
<span class="hljs-comment"># 如果要用的阶段没有设置别名，那么要使用--from=n，n表示从0开始的标记位</span>
<span class="hljs-keyword">COPY</span><span class="bash"> --from=maven-latest /target/demo.jar .</span>
<span class="hljs-comment"># 容器启动时执行的指令</span>
<span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;java -jar /demo.jar&quot;</span>]</span>
</code></pre>
<p>执行<code>docker build .</code>之后，执行构建。</p>
<h4>执行结果：</h4>
<p><img src="03104309_jcuj.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104309_jcuj.jpg" alt="image.png" /></p>
<h4>示例执行结果说明：</h4>
<ol>
<li>第一阶段以maven为基础镜像进行源代码的打包，第二阶段依托第一阶段的打包后的镜像进行构建；</li>
<li>在构建完成之后，查看镜像信息，有除了基础镜像之外有两个镜像，一个是第一阶段构建的，一个是第二阶段构建的。</li>
<li>通过 <code>docker history &lt;image id&gt;</code> 可以看到构建信息（小提示：镜像操作使用镜像ID的前4位即可）：<br />
<img src="03104309_uWd1.jpg" tppabs="https://static.oschina.net/uploads/img/202101/03104309_uWd1.jpg" alt="image.png" /></li>
</ol>
<p><strong>疑问： 为什么第一阶段构建的镜像比第二阶段构建的镜像大？</strong></p>
<p><strong>解释：</strong> 第一阶段构建镜像大，因为执行的<code>mvn clean package</code> 命令，会去下载项目所有的依赖jar，由于没有进行任何的删除操作，所有文件都会被保留在镜像中，这也就是在写Dockerfile需要注意的，在编写Dockerfile时候，要特别注意所有的操作不能有多余的文件或者依赖被加入，否则构建的镜像文件会比较大。</p>
<p>第一阶段构建镜像小，因为多阶段构建的核心命令是 <code>FROM</code>。在多阶段构建中，每次 <code>FROM</code> 都会开启一个新的 Stage（阶段），可以看作一个新的 Image（不够准确、来源请求），与其它阶段隔离（甚至包括环境变量）。只有最后的 <code>FROM</code> 才会被纳入 Image 中。</p>
<h2>RUN指令：</h2>
<pre class="hljs"><code><span class="hljs-keyword">shell</span><span class="bash"> 格式：RUN &lt;<span class="hljs-built_in">command</span>&gt; (/bin/sh -c /S /C)</span>
exec 格式：<span class="hljs-keyword">RUN</span><span class="bash"> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>]</span>
</code></pre>
<p><code>RUN</code>指令将会在前一条命令创建出的镜像的基础之上创建一个容器，并在容器中运行命令，在命令结束运行后提交容器为新镜像，新镜像将被Dockerfile中的下一条指令使用。</p>
<h4>使用说明：</h4>
<ol>
<li>使用exec格式时，命令是直接运行的，exec格式中的参数会作为JSON数组被Docker解析，所以在使用exec格式命令时，参数必须使用双引号不能单引号；</li>
<li>使用shell格式时，命令通过 <code>/bin/sh -c</code> 运行，可以使用反斜杠（\）将单个<code>RUN</code>指令继续到下一行。</li>
<li><code>RUN</code>指令将执行所有合法命令并提交执行结果，<code>RUN</code>指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定 <code>--no-cache</code> 参数，如：<code>docker build --no-cache</code>。</li>
</ol>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-comment"># 基础镜像</span>
<span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine AS openjdk8
<span class="hljs-comment"># 维护者信息</span>
<span class="hljs-keyword">LABEL</span><span class="bash"> maintainer=<span class="hljs-string">&quot;liwenqiang@tseveryday.com&quot;</span></span>
<span class="hljs-comment"># 镜像操作指令</span>
<span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$JAVA_HOME</span>&quot;</span></span>
</code></pre>
<h4>示例执行结果说明：</h4>
<p><img src="03104309_SZdw.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104309_SZdw.jpg" alt="image.png" /><br />
从打印的日志中可以看到RUN执行了JAVA_HOME的路径打印，我们再看下镜像中的信息：<img src="03104309_CIPp.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104309_CIPp.jpg" alt="image.png" /></p>
<h2>CMD指令：</h2>
<pre class="hljs"><code>exec格式（推荐）：<span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;executable&quot;</span>,<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>]</span>
<span class="hljs-keyword">entrypoint</span><span class="bash">格式：CMD [<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>] </span>
<span class="hljs-keyword">shell</span><span class="bash">格式：CMD <span class="hljs-built_in">command</span> param1 param2</span>
</code></pre>
<p>Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。<code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。它的主要目的是为执行中的容器提供默认值。</p>
<p>使用说明：</p>
<ol>
<li>shell格式和exec格式使用时，命令在容器中的运行方式和RUN一样，其规则同样适用；</li>
<li>每个 Dockerfile 只会执行一条<code>CMD</code>指令，如果Dockerfile中存在多条<code>CMD</code>指令命令，只有最后一条会被执行；</li>
<li>如果用户启动容器时候指定了运行的命令，则会覆盖掉<code>CMD</code>指定的命令。</li>
<li>entrypoint格式是在CMD指令和<code>ENTRYPOINT</code>指令配合时使用的，<code>CMD</code>指令中的参数会被添加到<code>ENTRYPOINT</code>指令中；</li>
<li>如果使用<code>CMD</code>为<code>ENTRYPOINT</code>指令提供默认参数，<code>CMD</code>和<code>ENTRYPOINT</code>指令都应以JSON数组格式指定；</li>
</ol>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-comment"># 基础镜像</span>
<span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine
<span class="hljs-comment"># 维护者信息</span>
<span class="hljs-keyword">LABEL</span><span class="bash"> maintainer=<span class="hljs-string">&quot;liwenqiang@tseveryday.com&quot;</span></span>
<span class="hljs-comment"># 镜像操作指令</span>
<span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;echo&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-variable">$JAVA_HOME</span>&quot;</span>]</span>
</code></pre>
<h4>示例执行结果说明：</h4>
<p><img src="03104310_eTI0.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104310_eTI0.jpg" alt="image.png" /><br />
可以从结果看到<code>CMD [&quot;echo&quot;，&quot;\$JAVA_HOME&quot;]</code>不会在$JAVA_HOME上进行可变替换。如果想要shell处理，使用shell形式或直接执行一个shell，例如：<code>CMD [&quot;sh&quot;,&quot;-c&quot;,&quot;echo JAVA_HOME&quot;]</code></p>
<h2>LABEL指令：</h2>
<pre class="hljs"><code><span class="hljs-keyword">LABEL</span><span class="bash"> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span>
</code></pre>
<h4>使用说明：</h4>
<ol>
<li>LABEL指令以key=value方式给镜像添加元数据，要在<code>LABEL</code>值中包含空格，请使用引号和反斜杠，就像在命令行解析中一样；</li>
<li>基础镜像、父镜像中包含的标签会被继承，如果镜像中标签已经存在但具有不同的值，则后面设置的值会覆盖先前设置的值；</li>
<li>一个镜像中可以有多个标签。您可以在一行上指定多个标签。</li>
</ol>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-comment"># 基础镜像</span>
<span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine AS openjdk8
<span class="hljs-comment"># 维护者信息</span>
<span class="hljs-keyword">LABEL</span><span class="bash"> maintainer=<span class="hljs-string">&quot;liwenqiang@tseveryday.com&quot;</span></span>
<span class="hljs-comment"># 多标签：标记版本号及描述信息，</span>
<span class="hljs-keyword">LABEL</span><span class="bash"> version=<span class="hljs-string">&quot;1.0&quot;</span> description=<span class="hljs-string">&quot;This text illustrates \
that label-values can span multiple lines.&quot;</span></span>
</code></pre>
<p>使用<code>docker inspect</code>命令查看image的labels</p>
<h4>示例执行结果说明：</h4>
<p><img src="03104310_ETqG.jpg" tppabs="https://static.oschina.net/uploads/img/202101/03104310_ETqG.jpg" alt="image.png" /><br />
每个<code>LABEL</code>指令产生一个新层，如果使用许多标签，可能会导致效率低下。如果Docker遇到已经存在的label/key，则新值将覆盖具有相同键的任何先前标签。</p>
<h2>EXPOSE指令：</h2>
<pre class="hljs"><code><span class="hljs-keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]
</code></pre>
<p><code>EXPOSE</code>指令通知Docker容器在运行时监听指定的网络端口，可以指定端口是侦听TCP还是UDP，如果未指定协议，则默认值为TCP。</p>
<h4>使用说明：</h4>
<ol>
<li>无论<code>EXPOSE</code>设置如何，都可以在运行时使用<code>-p</code>参数覆盖它们，例如：docker run -p 8080:80；</li>
<li><code>EXPOSE</code> 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会对外暴露这个端口，只有在<code>docker run</code> 时显示指定 -p [外部端口]:[容器端口]，才会对外暴露。</li>
</ol>
<p>在 Dockerfile 中使用EXPOSE声明端口有两个好处：</p>
<ol>
<li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；</li>
<li>在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</li>
</ol>
<h2>ENV指令：</h2>
<pre class="hljs"><code>设置一个：<span class="hljs-keyword">ENV</span> &lt;key&gt; &lt;value&gt;
设置多个：<span class="hljs-keyword">ENV</span> &lt;key&gt;=&lt;value&gt; &lt;key1&gt;=&lt;value1&gt; ...
</code></pre>
<p><code>ENV</code>指令将镜像运行时环境变量<code>&lt;key&gt;</code>设置为<code>&lt;value&gt;</code>。此值将在构建阶段中所有后续指令的环境中使用，并且在许多情况下也可以内联替换。</p>
<p>可以通过命令：<code>docker run -e &quot;key=value&quot;</code>来覆盖Dockerfile中的设置项的值。</p>
<h4>使用说明：</h4>
<ol>
<li>设置一个时，第一个空格后面的整个字符串将被视为<code>&lt;value&gt;</code> 包括空格和引号等字符；</li>
<li>设置多个时，这种形式在语法中使用&quot;=&quot;，与命令行解析一样，引号和反斜杠可用于在值内包含空格。</li>
</ol>
<pre class="hljs"><code><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine
<span class="hljs-comment"># 维护者信息</span>
<span class="hljs-keyword">LABEL</span><span class="bash"> maintainer=<span class="hljs-string">&quot;liwenqiang@tseveryday.com&quot;</span></span>
<span class="hljs-comment"># Pointer a active profile</span>
<span class="hljs-keyword">ENV</span> JAR=demo VERSION=<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>-RELEASE
<span class="hljs-comment"># Run the jar file</span>
<span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;java -jar /target/<span class="hljs-variable">${JAR}</span>-<span class="hljs-variable">${VERSION}</span>.jar&quot;</span>]</span>
</code></pre>
<h4>执行结果：</h4>
<p>通过docker inspect 查看镜像信息：=<img src="03104310_OQ7R.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104310_OQ7R.jpg" alt="image.png" /></p>
<h2>ADD指令：</h2>
<pre class="hljs"><code><span class="hljs-keyword">ADD</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span>
<span class="hljs-keyword">ADD</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="hljs-string">&quot;&lt;src&gt;&quot;</span>,... <span class="hljs-string">&quot;&lt;dest&gt;&quot;</span>]</span>
</code></pre>
<p>注：–chown 仅在用于在Linux上构建容器时的Dockerfile上可用，在Windows容器上不起作用</p>
<p><code>ADD</code>指令是有上下文的（默认为当前Dockerfile所在目录），从Dockerfile文件相对的<code>&lt;src&gt;</code>路径下复制其下的文件/文件夹到Docker镜像的工作目录下的相对的<code>&lt;dest&gt;</code>目录。</p>
<p>例如：linux的/home/user/src下执行Dockerfile构建镜像，要添加/home/user/src/demo文件夹所有内容到docker镜像的/app工作目录下，需要设置<code>ADD . /app/</code> 。</p>
<p><code>&lt;src&gt;</code>也可以为远程文件URL，当<code>&lt;src&gt;</code>是远程文件URL的情况下，目标将具有600的权限。如果正在检索的远程文件具有HTTP Last-Modified 的标头，则来自该标头的时间戳将用于设置目的地上的mtime文件，另外像在<code>ADD</code>期间处理的任何其它文件一样，mtime将不包括在确定文件是否已经改变并且高速缓存应该被更新。</p>
<h4>规则：</h4>
<ul>
<li><code>&lt;src&gt;</code>路径必须在构建的上下文中，不能<code>ADD ../something /target</code>，因为docker构建的第一步是发送上下文目录（和子目录）到docker守护进程。</li>
<li>如果<code>&lt;src&gt;</code>是URL并且<code>&lt;dest&gt;</code>不以尾部斜杠结尾，则从URL下载文件并将其复制到<code>&lt;dest&gt;</code>。</li>
<li>如果<code>&lt;src&gt;</code>是URL并且<code>&lt;dest&gt;</code>以尾部斜杠结尾，则从URL中推断文件名，并将文件下载到<code>&lt;dest&gt;/&lt;filename&gt;</code>。例如，<code>ADD http://example.com/foobar /</code>会创建文件/foobar。网址必须有一个非平凡的路径，以便在这种情况下可以发现一个适当的文件名（<a href="javascript:if(confirm(%27http://example.xn--com-928d31cllg28f/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27http://example.xn--com-928d31cllg28f/%27" tppabs="http://example.xn--com-928d31cllg28f/">http://example.com不会工作</a>）。</li>
</ul>
<h4>使用说明：</h4>
<ol>
<li><code>&lt;src&gt;</code>资源可以指定多个，但如果指定的是文件或目录，会被解析为基于镜像上下文的相对路径。</li>
<li>如果<code>&lt;src&gt;</code>是目录，则复制目录的整个内容，包括文件系统元数据。</li>
<li>如果URL文件使用身份验证保护，则需要使用<code>RUN wget</code>，<code>RUN curl</code>或从容器内使用其他工具，因为<code>ADD</code>指令不支持身份验证。</li>
<li>在Dockerfile构建镜像时使用<code>docker build - &lt;somefile</code>构建，这时没有构建上下文，所以Dockerfile只能包含一个基于URL的<code>ADD</code>指令。</li>
<li>可以通过命令传递压缩归档文件：<code>docker build - &lt;archive.tar.gz</code>，归档根目录下的Dockerfile和归档的其余部分将在构建的上下文中使用。</li>
<li>如果<code>&lt;src&gt;</code>是识别的压缩格式（identity，gzip，bzip2或xz）的本地tar存档，则将其解包为目录（识别是基于文件内容的而不是文件名，例如文件名是demo.tar.gz，但是文件是空的，就不会去解压）。来自远程URL的资源不会解压缩。</li>
<li>如果直接或由于使用通配符指定了多个<code>&lt;src&gt;</code>资源，则<code>&lt;dest&gt;</code>必须是目录，并且必须以斜杠/结尾。</li>
<li>如果<code>&lt;dest&gt;</code>不以尾部斜杠结尾，它将被视为常规文件，<code>&lt;src&gt;</code>的内容将写在<code>&lt;dest&gt;</code>。</li>
<li>如果<code>&lt;dest&gt;</code>不存在，则会与其路径中的所有缺少的目录一起创建。</li>
</ol>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-comment"># 设置基础镜像</span>
<span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine
<span class="hljs-comment"># 复制jar包到镜像中</span>
<span class="hljs-keyword">ADD</span><span class="bash"> https://oss.abeille.top/demo-0.0.1-SNAPSHOT.jar .</span>
<span class="hljs-comment"># 容器启动时执行的指令</span>
<span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;java -jar demo-0.0.1-SNAPSHOT.jar&quot;</span>]</span>
</code></pre>
<h4>执行结果：</h4>
<p><img src="03104310_L3Ty.jpg" tppabs="https://static.oschina.net/uploads/img/202101/03104310_L3Ty.jpg" alt="image.png" />通过结果可以看到，镜像在构建过程中会把远程地址的文件下载并写入镜像的上下文的根目录 . 中，构建完成之后启动镜像验证结果，结果打印了正常的服务日志，说明构建的镜像是可以使用的。</p>
<h2>COPY指令：</h2>
<pre class="hljs"><code><span class="hljs-keyword">COPY</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span>
<span class="hljs-keyword">COPY</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="hljs-string">&quot;&lt;src&gt;&quot;</span>,... <span class="hljs-string">&quot;&lt;dest&gt;&quot;</span>]</span>
</code></pre>
<p>注：–chown仅在用于在Linux上构建容器时的Dockerfile上可用，在Windows容器上不起作用<br />
–chown标志指定给定的用户名，组名或UID / GID组合以请求对复制内容的特定所有权</p>
<p><code>COPY</code> 指令复制<code>&lt;src&gt;</code>所指向的文件或目录，将它添加到新镜像中，复制的文件或目录在镜像中的路径是<code>&lt;dest&gt;</code>。<code>&lt;src&gt;</code>所指定的源可以有多个，但必须在上下文中，即必须是上下文根目录的相对路径。</p>
<h4>使用说明：</h4>
<ol>
<li><code>&lt;src&gt;</code>可以使用通配符指向所有匹配通配符的文件或目录；</li>
<li><code>&lt;dest&gt;</code>可以是文件或目录，但是必须是目标镜像中的绝对路径或者相对于WORKDIR 的相对路径；</li>
<li>若<code>&lt;src&gt;</code>或<code>&lt;dest&gt;</code>以斜杠/结尾，则其指向的是目录，否则指向文件。</li>
<li>若<code>&lt;dest&gt;</code>是一个文件，则<code>&lt;src&gt;</code>的内容会被写入到<code>&lt;dest&gt;</code>中，否则<code>&lt;src&gt;</code>所指向的文件或目录中的内容会被复制添加到<code>&lt;dest&gt;</code>目录中。</li>
<li>当<code>&lt;src&gt;</code>指定多个源时，<code>&lt;dest&gt;</code>必须是目录，如果<code>&lt;dest&gt;</code>不存在，则会被创建。</li>
</ol>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-comment"># 设置基础镜像</span>
<span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine
<span class="hljs-comment"># 复制jar包到镜像中</span>
<span class="hljs-keyword">COPY</span><span class="bash"> /target/demo-0.0.1-SNAPSHOT.jar .</span>
<span class="hljs-comment"># 容器启动时执行的指令</span>
<span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;java -jar demo-0.0.1-SNAPSHOT.jar&quot;</span>]</span>
</code></pre>
<h4>示例执行结果说明：</h4>
<p><img src="03104310_N9qn.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104310_N9qn.jpg" alt="image.png" />上图是执行结果可以看到，在指定的路径下文件不存在时，会打印异常信息，且构建过程会终止但是之前执行的步骤生成的镜像还是会在docker daemon缓存中存在。这是因为<code>&lt;dest&gt;</code>不是以斜杠结尾，所以就会把demo.jar 写入到<code>&lt;dest&gt;</code>，但是这个demo.jar又不存在，所以写入的时候发生异常。</p>
<p>修改示例为正确路径文件后，在执行构建，并运行镜像，就会打印服务启动的日志。<img src="03104310_DYtd.jpg" tppabs="https://static.oschina.net/uploads/img/202101/03104310_DYtd.jpg" alt="image.png" /></p>
<h2>ENTRYPOINT指令：</h2>
<pre class="hljs"><code>exec格式：<span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>]</span>
<span class="hljs-keyword">shell</span><span class="bash">格式：ENTRYPOINT <span class="hljs-built_in">command</span> param1 param2</span>
</code></pre>
<p><code>ENTRYPOINT</code>指令和 <code>CMD</code> 相似，都可以让容器在每次启动时执行相同的命令，但是又有不同的地方，<code>CMD</code>可以是命令，也可以是参数，而<code>ENTRYPOINT</code>只能是命令。</p>
<h4>使用说明：</h4>
<ol>
<li>在使用shell格式时，<code>ENTRYPOINT</code>指令会忽略所有的<code>CMD</code>指令和docker run 命令的参数，并且会运行在 /bin/sh -c 中，这就说明<code>ENTRYPOINT</code>指令进程为 /bin/sh -c 的子进程，进程在容器中的PID不是1，且不接受Unix信号，即在使用docker stop 命令时，命令进程接收不到SIGTERM信号；</li>
<li><code>ENTRYPOINT</code> 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 <code>docker run --entrypoint</code>来指定；</li>
<li>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令；</li>
<li>在一个Dockerfile 中可以有多条<code>ENTRYPOINT</code>指令，但是只有最后一条有效；</li>
<li>使用exec格式时，<code>docker run</code> 传入的命令会覆盖CMD指令的内容并且附加到<code>ENTRYPOINT</code>指令的参数中，而不会覆盖<code>ENTRYPOINT</code>指令的参数。</li>
</ol>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine
<span class="hljs-comment"># 复制jar包到镜像中</span>
<span class="hljs-keyword">ADD</span><span class="bash"> /target/demo-0.0.1-SNAPSHOT.jar .</span>
<span class="hljs-comment"># 容器启动时执行的指令</span>
<span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;java -jar demo-0.1.0-SNAPSHOT.jar&quot;</span>]</span>
<span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;java -jar demo-0.0.1-SNAPSHOT.jar&quot;</span>]</span>
</code></pre>
<h4>示例执行结果说明：</h4>
<p><img src="03104311_NbWg.jpg" tppabs="https://static.oschina.net/uploads/img/202101/03104311_NbWg.jpg" alt="image.png" />通过构建过成可以看到，在构建时，并不会执行<code>ENTRYPOINT</code>的命令，当我们启动镜像时才会执行其中的ENTRYPOINT，虽然设置了两个<code>ENTRYPOINT</code>指令，但是只执行了<code>java -jar demo-0.0.1-SNAPSHOT.jar</code>命令来启动服务，因为 demo-0.1.0-SNAPSHOT.jar 这个并不存在，如果会执行第一个<code>ENTRYPOINT</code>的话，启动一个不存在的jar肯定是会发生异常。这也印证了使用说明中的第4条。</p>
<h2>VOLUME指令：</h2>
<pre class="hljs"><code><span class="hljs-keyword">VOLUME</span><span class="bash"> [<span class="hljs-string">&quot;/data&quot;</span>]</span>
</code></pre>
<p><code>VOLUME</code>指令创建具有指定名称的挂载点，并将其标记为从本机主机或其他容器保留外部挂载的卷。该值可以是JSON数组VOLUME [“/var/log/”]或具有多个参数的纯字符串。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p>
<h4>使用说明：</h4>
<ol>
<li>基于Windows的容器上的卷：使用基于Windows的容器时，容器内的卷的目表地址必须是不存在或空目录，并且不能是 C 盘下的目录。</li>
<li>主机目录是在容器运行时声明的：主机目录（挂载点）从本质上说是依赖于主机的。这是为了保留镜像的可移植性，因为不能保证给定的主机目录在所有主机上都可用。因此，无法从Dockerfile内挂载主机目录。该<code>VOLUME</code>指令不支持指定host-dir 参数。创建或运行容器时，必须指定安装点。</li>
</ol>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine
<span class="hljs-keyword">VOLUME</span><span class="bash"> /data</span>
</code></pre>
<h4>示例执行结果说明：</h4>
<h4>疑问：</h4>
<p>Dockerfile 中有一个 <code>VOLUME</code> 命令，可以把挂载一个目录到主机目录，但是在主机目录下的名字是随机的，除非用户用 -v 指定，但是如果在 Dockerfile 中不用 <code>VOLUME</code>，只在运行时用 -v 指定也能达到效果，那么就有一个问题，<code>VOLUME</code> 在 Dockerfile 中到底有多少用，在 Host 下创建了几个用户一般找不到的文件到底有多少使用价值，大部分情况下用户都是要手动使用 -v 重新指定挂载目录，那 <code>VOLUME</code> 命令就显得很鸡肋。</p>
<h4>解释：</h4>
<p>可以把<code>VOLUME</code>理解为，从镜像中复制指定卷的文件夹到本地 /var/lib/docker/volumes/xxxxxxxxx/ 文件夹，然后把本地的该文件夹挂载到容器里面去。</p>
<p>因为VOLUME实际上就是在本地新建了一个文件夹挂载了，那么实际上容器内部的文件夹有三种情况：</p>
<ol>
<li>没有指定<code>VOLUME</code>也没有指定<code>-v</code>，这种是普通文件夹。</li>
<li>指定了<code>VOLUME</code>没有指定<code>-v</code>，这种文件夹可以在不同容器之间共享，但是无法在本地修改。</li>
<li>指定了<code>-v</code>的文件夹，这种文件夹可以在不同容器之间共享，且可以在本地修改。</li>
</ol>
<h2>USER指令：</h2>
<pre class="hljs"><code><span class="hljs-keyword">USER</span> &lt;<span class="hljs-keyword">user</span>&gt;[:&lt;group&gt;]
<span class="hljs-keyword">USER</span> &lt;UID&gt;[:&lt;GID&gt;]
</code></pre>
<p>指定运行容器时的用户名或 UID，后续的 <code>RUN</code> 也会使用指定用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。</p>
<h4>使用说明：</h4>
<ol>
<li>在Windows上，如果不是内置帐户，则必须首先创建用户。这可以通过<code>net user</code>作为Dockerfile的一部分调用的命令来完成。</li>
<li>当用户没有主要组时，镜像（或后续说明）将与该root组一起运行。</li>
</ol>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-keyword">RUN</span><span class="bash"> groupadd -r dev &amp;&amp; useradd -r -g dev dev</span>
<span class="hljs-keyword">USER</span> dev
<span class="hljs-keyword">RUN</span><span class="bash"> [ <span class="hljs-string">&quot;systemctl start elasticsearch&quot;</span> ]</span>
</code></pre>
<h2>WORKDIR指令：</h2>
<pre class="hljs"><code><span class="hljs-keyword">WORKDIR</span><span class="bash"> /path/to/workdir</span>
</code></pre>
<p>为后续的 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 指令配置工作目录，在<code>WORKDIR</code>指令之前执行的指令，由于没有设置<code>WORKDIR</code>，它默认为当前镜像构建的上下文根目录，所以会基于根目录执行。</p>
<h4>使用说明：</h4>
<ol>
<li><code>WORKDIR</code>指令可以解析先前使用ENV设置的环境变量。您只能使用在Dockerfile中显式设置的环境变量；</li>
<li>可以使用多个 <code>WORKDIR</code> 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。</li>
</ol>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-alpine
<span class="hljs-keyword">WORKDIR</span><span class="bash"> /everyday</span>
<span class="hljs-keyword">WORKDIR</span><span class="bash"> chain</span>
<span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">pwd</span></span>
</code></pre>
<h4>示例执行结果说明：</h4>
<p><img src="03104311_ea1H.jpg.png" tppabs="https://static.oschina.net/uploads/img/202101/03104311_ea1H.jpg" alt="image.png" /></p>
<h2>ARG指令：</h2>
<pre class="hljs"><code><span class="hljs-keyword">ARG</span> &lt;name&gt;[=&lt;default value&gt;]
</code></pre>
<p>构建参数和 <code>ENV</code> 的效果一样，都是设置环境变量。所不同的是，<code>ARG</code> 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。通过 <code>docker history</code> 可以看到所有设置的值。</p>
<h4>使用说明：</h4>
<ol>
<li>不使用build-time变量来传递诸如github密钥，用户凭证等密码。构建时变量值使用docker history命令对图像的任何用户可见；</li>
<li>ARG 指令定义参数的默认值可以在 <code>docker build</code> 中用 <code>--build-arg &lt;key&gt;=&lt;value&gt;</code> 来覆盖；</li>
<li>在 1.13 之前的版本，要求 <code>--build-arg</code> 中的参数名，必须在 Dockerfile 中用 <code>ARG</code> 定义过了，就是 <code>--build-arg</code> 指定的参数，必须在Dockerfile 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。</li>
</ol>
<h4>构建示例：</h4>
<pre class="hljs"><code><span class="hljs-keyword">ARG</span> VERSION=<span class="hljs-number">8</span>-jdk-alpine
<span class="hljs-comment"># 基础镜像</span>
<span class="hljs-keyword">FROM</span> openjdk:$VERSION
<span class="hljs-keyword">ARG</span> VERSION
<span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$VERSION</span> &gt; java_version</span>
</code></pre>
<h2>ONBUILD指令：</h2>
<pre class="hljs"><code><span class="hljs-keyword">ONBUILD</span> [INSTRUCTION]
</code></pre>
<p><code>ONBUILD</code> 是一个特殊的指令，它的功能时添加一个将来执行的触发器指令到镜像中，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行，当该镜像作为<code>FROM</code>指令的参数时， 这些触发器指令就会在<code>FROM</code>指令执行时加入到构建中。当需要构建一个基础镜像时，<code>ONBUILD</code>是很有用的。</p>
<h4>ONBUILD指令具体执行步骤：</h4>
<ol>
<li>在构建过程中，ONBUILD指令会添加到触发器指令镜像的云数据中，这些触发器不会再当前构建中执行；</li>
<li>在构建过程最后，触发器指令会被存储在镜像详情中，其主键是OnBuild，可以使用docker inspect命令查看；</li>
<li>构建完成后，该镜像可能作为其他Dockerfile中的<code>FROM</code>指令的参数，在构建时<code>FROM</code>指令会寻找<code>ONBUILD</code>触发器指令，并且会以它们注册的顺序执行。如果有触发器执行失败，则<code>FROM</code>指令被中止，并返回失败；如果所有的触发器执行成功，则<code>FROM</code>会执行下面的命令。在镜像构建完成后，触发器会被清除，不会被子孙镜像继承。</li>
</ol>
<h4>使用说明：</h4>
<ol>
<li><code>ONBUILD</code>指令中不能包含 <code>ONBUILD</code>指令，并且不会触发<code>FROM</code>指令；</li>
<li>使用<code>ONBUILD</code>指令的Dockerfile构建的镜像应该有特殊的标签，例如：demo:1.1.0-onbuild，这样做的好处是提示开发人员要在使用时注意；</li>
<li>在<code>ONBUILD</code>指令中添加<code>ADD</code>和<code>COPY</code>指令时要特别注意，假如新构建过程的被添加的资源缺失了，会导致构建失败；</li>
</ol>
</div> <div class="bg-gray-200 my-8 p-8"><ul class="grid grid-flow-row grid-rows-2 grid-cols-1 md:grid-rows-1 md:grid-cols-2 gap-4 text-xs font-bold"><li><a href="21414BX0U.htm" tppabs="https://www.leafage.top/posts/detail/21414BX0U" title="21414BX0U" class="flex items-center transform hover:-translate-x-2 transition duration-500"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-left"><polyline points="15 18 9 12 15 6"></polyline></svg>vue3+typescript上传文件到七牛云</a></li> <li class="flex items-center justify-end"><a href="21525BRK1.htm" tppabs="https://www.leafage.top/posts/detail/21525BRK1" title="21525BRK1" class="flex items-center transform hover:translate-x-2 transition duration-500">CentOS7开启端口（永久）
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"><polyline points="9 18 15 12 9 6"></polyline></svg></a></li></ul></div></article> <div class="my-12"><div class="flex divide-y-2 divide-gray-400 divide-dotted"><h3 class="uppercase font-extrabold">Top Posts</h3> <span class="flex-1 w-full ml-4 mt-3"></span></div> <div class="my-6"><div class="grid grid-flow-row grid-rows-3 grid-cols-1 md:grid-rows-1 md:grid-cols-3 gap-4 md:gap-8"><div><div class="overflow-hidden relative"><div class="transform hover:scale-110 transition duration-500"><img src="data-4404730_640.jpg-imageMogr2-thumbnail-640x192-format-webp-blur-1x0-quality-75" tppabs="https://cdn.leafage.top/data-4404730_640.jpg?imageMogr2/thumbnail/640x192/format/webp/blur/1x0/quality/75" alt="Mybatis批量操作sql写法" class="w-full h-44"></div> <a href="posts-category=Technology.htm" tppabs="https://www.leafage.top/posts?category=Technology" title="Technology" class="absolute top-0 text-white text-xs font-extrabold uppercase p-4">Technology</a></div> <div><h3 class="font-extrabold my-4 transform hover:translate-x-2 transition duration-500"><a href="20815YW6T.htm" tppabs="https://www.leafage.top/posts/detail/20815YW6T" title="20815YW6T">Mybatis批量操作sql写法</a></h3> <ul class="flex text-xs space-x-6 uppercase text-gray-500"><li>4/10/2021</li> <li class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-eye mr-1"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path> <circle cx="12" cy="12" r="3"></circle></svg>633
                  </li> <li class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-heart mr-1"><path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path></svg>10
                  </li></ul></div></div><div><div class="overflow-hidden relative"><div class="transform hover:scale-110 transition duration-500"><img src="security-869216_640.jpg-imageMogr2-thumbnail-640x192-format-webp-blur-1x0-quality-75" tppabs="https://cdn.leafage.top/security-869216_640.jpg?imageMogr2/thumbnail/640x192/format/webp/blur/1x0/quality/75" alt="spring security 学习和踩坑总结（入门）" class="w-full h-44"></div> <a href="posts-category=Technology.htm" tppabs="https://www.leafage.top/posts?category=Technology" title="Technology" class="absolute top-0 text-white text-xs font-extrabold uppercase p-4">Technology</a></div> <div><h3 class="font-extrabold my-4 transform hover:translate-x-2 transition duration-500"><a href="208291JMJ.htm" tppabs="https://www.leafage.top/posts/detail/208291JMJ" title="208291JMJ">spring security 学习和踩坑总结（入门）</a></h3> <ul class="flex text-xs space-x-6 uppercase text-gray-500"><li>4/10/2021</li> <li class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-eye mr-1"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path> <circle cx="12" cy="12" r="3"></circle></svg>499
                  </li> <li class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-heart mr-1"><path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path></svg>2
                  </li></ul></div></div><div><div class="overflow-hidden relative"><div class="transform hover:scale-110 transition duration-500"><img src="password-2781614_640.jpg-imageMogr2-thumbnail-640x192-format-webp-blur-1x0-quality-75" tppabs="https://cdn.leafage.top/password-2781614_640.jpg?imageMogr2/thumbnail/640x192/format/webp/blur/1x0/quality/75" alt="一步步带你实现redis分布式锁" class="w-full h-44"></div> <a href="posts-category=Technology.htm" tppabs="https://www.leafage.top/posts?category=Technology" title="Technology" class="absolute top-0 text-white text-xs font-extrabold uppercase p-4">Technology</a></div> <div><h3 class="font-extrabold my-4 transform hover:translate-x-2 transition duration-500"><a href="20824ZB0N.htm" tppabs="https://www.leafage.top/posts/detail/20824ZB0N" title="20824ZB0N">一步步带你实现redis分布式锁</a></h3> <ul class="flex text-xs space-x-6 uppercase text-gray-500"><li>2/2/2021</li> <li class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-eye mr-1"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path> <circle cx="12" cy="12" r="3"></circle></svg>459
                  </li> <li class="flex items-center"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-heart mr-1"><path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path></svg>7
                  </li></ul></div></div></div></div></div></div> <aside data-fetch-key="SideBar:0" class="lg:flex lg:justify-end w-full"><div class="lg:ml-12"><div class="border border-solid border-gray-200 p-8"><h3 class="font-extrabold">欢迎关注公众号（Leafage）</h3> <div class="flex items-center mt-4"><img src="leafage-wechat.jpg" tppabs="https://www.leafage.top/images/resources/leafage-wechat.jpg" alt="leafage" class="w-32 h-32 border"> <div class="mx-4"><p class="my-2">微信搜一搜</p> <input type="text" disabled="disabled" placeholder="Leafage" class="placeholder-gray-600 border border-gray-300 p-2 w-full text-sm rounded"></div></div></div> <div class="my-12 py-8 border border-solid border-gray-200 relative"><h3 class="absolute top-0 -mt-3 px-2 ml-6 bg-white uppercase text-sm font-semibold">
        Trending
      </h3> <div class="flex px-4 md:px-8 py-2"><img src="data-4404730_640.jpg-imageMogr2-thumbnail-640x80-format-webp-blur-1x0-quality-75" tppabs="https://cdn.leafage.top/data-4404730_640.jpg?imageMogr2/thumbnail/640x80/format/webp/blur/1x0/quality/75" alt="Mybatis批量操作sql写法" class="w-28 h-20"> <div class="m-2 md:ml-4"><h3 class="text-sm font-bold transform hover:translate-x-2 transition duration-500"><a href="20815YW6T.htm" tppabs="https://www.leafage.top/posts/detail/20815YW6T" title="20815YW6T">Mybatis批量操作sql写法</a></h3> <p class="text-xs mt-2 hidden sm:block lg:hidden">使用mybatis时，如何自定义实现批量操作数据，SQL如何编写，其中需要注意的点有哪些</p> <span class="text-xs text-gray-500 font-bold uppercase">4/10/2021</span></div></div><div class="flex px-4 md:px-8 py-2"><img src="security-869216_640.jpg-imageMogr2-thumbnail-640x80-format-webp-blur-1x0-quality-75" tppabs="https://cdn.leafage.top/security-869216_640.jpg?imageMogr2/thumbnail/640x80/format/webp/blur/1x0/quality/75" alt="spring security 学习和踩坑总结（入门）" class="w-28 h-20"> <div class="m-2 md:ml-4"><h3 class="text-sm font-bold transform hover:translate-x-2 transition duration-500"><a href="208291JMJ.htm" tppabs="https://www.leafage.top/posts/detail/208291JMJ" title="208291JMJ">spring security 学习和踩坑总结（入门）</a></h3> <p class="text-xs mt-2 hidden sm:block lg:hidden">spring security 是个很强大的框架，但是网上没有一个完整的对于它的一个分析，或者使用的说明，本文将一步步的对其进行使用和分析做出说明</p> <span class="text-xs text-gray-500 font-bold uppercase">4/10/2021</span></div></div><div class="flex px-4 md:px-8 py-2"><img src="password-2781614_640.jpg-imageMogr2-thumbnail-640x80-format-webp-blur-1x0-quality-75" tppabs="https://cdn.leafage.top/password-2781614_640.jpg?imageMogr2/thumbnail/640x80/format/webp/blur/1x0/quality/75" alt="一步步带你实现redis分布式锁" class="w-28 h-20"> <div class="m-2 md:ml-4"><h3 class="text-sm font-bold transform hover:translate-x-2 transition duration-500"><a href="20824ZB0N.htm" tppabs="https://www.leafage.top/posts/detail/20824ZB0N" title="20824ZB0N">一步步带你实现redis分布式锁</a></h3> <p class="text-xs mt-2 hidden sm:block lg:hidden">在开发过程中，那面遇到一些场景，需要实现锁，现在大都是分布式方案，那么分布式下如何实现锁</p> <span class="text-xs text-gray-500 font-bold uppercase">2/2/2021</span></div></div><div class="flex px-4 md:px-8 py-2"><img src="woman-1919143_640.jpg-imageMogr2-thumbnail-640x80-format-webp-blur-1x0-quality-75" tppabs="https://cdn.leafage.top/woman-1919143_640.jpg?imageMogr2/thumbnail/640x80/format/webp/blur/1x0/quality/75" alt="prometheus和grafana服务监控系统" class="w-28 h-20"> <div class="m-2 md:ml-4"><h3 class="text-sm font-bold transform hover:translate-x-2 transition duration-500"><a href="2129YYQ4.htm" tppabs="https://www.leafage.top/posts/detail/2129YYQ4" title="2129YYQ4">prometheus和grafana服务监控系统</a></h3> <p class="text-xs mt-2 hidden sm:block lg:hidden">Prometheus内置了一个强大的数据查询语言PromQL。 通过PromQL可以实现对监控数据的查询、聚合。同时PromQL</p> <span class="text-xs text-gray-500 font-bold uppercase">4/20/2021</span></div></div><div class="flex px-4 md:px-8 py-2"><img src="security-265130_640.jpg-imageMogr2-thumbnail-640x80-format-webp-blur-1x0-quality-75" tppabs="https://cdn.leafage.top/security-265130_640.jpg?imageMogr2/thumbnail/640x80/format/webp/blur/1x0/quality/75" alt="spring security 学习和踩坑总结（表单）" class="w-28 h-20"> <div class="m-2 md:ml-4"><h3 class="text-sm font-bold transform hover:translate-x-2 transition duration-500"><a href="20829TXGD.htm" tppabs="https://www.leafage.top/posts/detail/20829TXGD" title="20829TXGD">spring security 学习和踩坑总结（表单）</a></h3> <p class="text-xs mt-2 hidden sm:block lg:hidden">本篇将介绍如何进行自定义的一些配置来实现自定义的登录，包括从数据库查用户信息等</p> <span class="text-xs text-gray-500 font-bold uppercase">4/28/2021</span></div></div></div> <div class="border border-solid border-gray-200 relative"><h3 class="absolute top-0 -mt-3 px-2 ml-6 bg-white uppercase text-sm font-semibold">
        Categories
      </h3> <ul class="grid grid-cols-1 divide-y divide-gray-300 p-8 text-xs text-gray-600 font-semibold uppercase list-disc"><li class="py-3 mx-4"><a href="posts-category=Technology.htm" tppabs="https://www.leafage.top/posts?category=Technology" title="Technology">Technology</a> <span class="mr-2 float-right">14</span></li><li class="py-3 mx-4"><a href="posts-category=Lifestyle.htm" tppabs="https://www.leafage.top/posts?category=Lifestyle" title="Lifestyle">Lifestyle</a> <span class="mr-2 float-right">1</span></li><li class="py-3 mx-4"><a href="posts-category=Travel.htm" tppabs="https://www.leafage.top/posts?category=Travel" title="Travel">Travel</a> <span class="mr-2 float-right">0</span></li><li class="py-3 mx-4"><a href="posts-category=Experience.htm" tppabs="https://www.leafage.top/posts?category=Experience" title="Experience">Experience</a> <span class="mr-2 float-right">1</span></li><li class="py-3 mx-4"><a href="posts-category=Photograph.htm" tppabs="https://www.leafage.top/posts?category=Photograph" title="Photograph">Photograph</a> <span class="mr-2 float-right">0</span></li></ul></div> <div class="my-12 border-2 border-solid border-black border-opacity-70 p-8"><h3 class="font-extrabold">Send Email To Me</h3> <form class="mt-4 flex items-center"><input type="email" placeholder="Enter your email adress" class="w-full text-sm text-black placeholder-gray-600 border border-gray-300 py-2 pl-4"> <a aria-label="email" title="email" href="mailto:little3201@163.com?subject=Leafage%20Website%20News" class="bg-black text-white p-2 -ml-1"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-send"><line x1="22" y1="2" x2="11" y2="13"></line> <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg></a></form></div> <div class="border border-solid border-gray-200 relative my-12"><h3 class="absolute top-0 -mt-3 px-2 ml-6 bg-white uppercase text-sm font-semibold">
        Friend Chain
      </h3> <ul class="grid grid-cols-1 divide-y divide-gray-300 p-8 text-xs text-gray-600 font-semibold list-decimal"><li class="py-3 mx-4"><a title="howtodoinjava" href="javascript:if(confirm(%27https://howtodoinjava.com/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://howtodoinjava.com/%27" tppabs="https://howtodoinjava.com/" target="_blank" rel="noopener">howtodoinjava</a></li> <li class="py-3 mx-4"><a title="nginx" href="javascript:if(confirm(%27https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN%27" tppabs="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN" rel="noopener" target="_blank">nginx配置生成</a></li> <li class="py-3 mx-4"><a title="leafage console" href="javascript:if(confirm(%27https://console.leafage.top/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://console.leafage.top/%27" tppabs="https://console.leafage.top/" target="_blank" rel="noopener">leafage后台管理系统</a></li> <li class="py-3 mx-4"><a title="csdn" href="javascript:if(confirm(%27https://blog.csdn.net/zx110503?spm=1008.2028.3001.5343&type=blog  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://blog.csdn.net/zx110503?spm=1008.2028.3001.5343&type=blog%27" tppabs="https://blog.csdn.net/zx110503?spm=1008.2028.3001.5343&type=blog" rel="noopener" target="_blank">csdn</a></li> <li class="py-3 mx-4"><a title="oschina" href="javascript:if(confirm(%27https://my.oschina.net/u/4066932  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://my.oschina.net/u/4066932%27" tppabs="https://my.oschina.net/u/4066932" target="_blank" rel="noopener">开源中国 oschina</a></li> <li class="py-3 mx-4"><a title="segmentfault" href="javascript:if(confirm(%27https://segmentfault.com/u/bujidao_5d0c24ce7055e/articles  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://segmentfault.com/u/bujidao_5d0c24ce7055e/articles%27" tppabs="https://segmentfault.com/u/bujidao_5d0c24ce7055e/articles" rel="noopener" target="_blank">思否 segmentfault</a></li></ul></div></div></aside></div></div></main> <footer class="bg-black"><section class="container mx-auto px-2 md:px-12 lg:px-16 xl:px-20"><div class="md:flex md:justify-between items-center text-white md:h-32"><div class="flex justify-center text-3xl tracking-widest font-black uppercase py-4"><a href="index.htm" tppabs="https://www.leafage.top/" title="leafage" class="nuxt-link-active">Leafage</a></div> <div class="flex justify-center space-x-6 sm:my-4"><a title="github" href="javascript:if(confirm(%27https://github.com/little3201  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://github.com/little3201%27" tppabs="https://github.com/little3201" rel="noopener" target="_blank">Github</a> <a title="gitee" href="javascript:if(confirm(%27https://gitee.com/little3201  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://gitee.com/little3201%27" tppabs="https://gitee.com/little3201" rel="noopener" target="_blank">Gitee</a></div> <div class="flex justify-center space-x-10 uppercase font-extrabold my-4"><a href="about.htm" tppabs="https://www.leafage.top/about" title="about">About</a> <a href="contact.htm" tppabs="https://www.leafage.top/contact" title="contact">Contact</a></div></div></section> <section class="py-3 text-xs text-center text-gray-400 container mx-auto px-2 md:px-12 lg:px-16 xl:px-20"><p class="border-t border-gray-700 py-3">
      © 2021 leafage.top All Rights Reserved.
    </p> <p><a href="javascript:if(confirm(%27https://beian.miit.gov.cn/  \n\nThis file was not retrieved by Teleport Ultra, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?%27))window.location=%27https://beian.miit.gov.cn/%27" tppabs="https://beian.miit.gov.cn/" rel="noopener" target="_blank">陕ICP备19017836号-1</a></p></section></footer></div></div></div><script>window.__LEAFAGE__=(function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R){k[0]="命令行";k[1]="dockerfile";k[2]="docker";return {layout:"default",data:[{data:{code:h,modifyTime:"2021-05-26T09:42:34.822",title:i,subtitle:j,cover:"https:\u002F\u002Fcdn.leafage.top\u002Fbox-1995679.jpg",tags:k,category:b,likes:a,comment:a,viewed:17,content:"# Dockerfile\n\nDockerfile 描述了组装镜像的步骤，其中每条指令都是单独执行的。除了FROM指令，其他每一条指令都会在上一条指令所生成镜像的基础上执行，执行完后会生成一个新的镜像层，新的镜像层覆盖在原来的镜像之上从而形成了新的镜像。Dockerfile所生成的最终镜像就是在基础镜像上面叠加一层层的镜像层组件的。Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。\n\nDockerfile 中指令不区分大小写，以 “#” 开头的是注释行，而在其他位置出现的 “#” 会被当成参数。\n\n#### 基础示例：\n\n```dockerfile\n# 基础镜像\nFROM openjdk:8-jdk-alpine AS openjdk8\n# 维护者信息\nLABEL maintainer=\"https://www.leafage.top/posts/detail/liwenqiang@tseveryday.com\"\n# 镜像操作指令\nRUN echo \"JAVA_HOME\"\n# 容器启动时执行的指令\nCMD [\"java -version\"]\n```\n**基础镜像推荐使用alpine版本的，这个会使得基础镜像很轻**\n\n非alpine版本的镜像：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104308_v1le.jpg)  \n\nalpine版本的镜像：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_pYZA.jpg)  \n\n执行`docker build .`来构建镜像\n\n#### 执行结果：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_GkEt.jpg)\n\n#### 示例执行结果说明：\n\n通过执行结果可以看到，第一次构建，没有基础镜像openjdk:8-jdk-alpine，自动去docker hub上拉取镜像。\n\n1.  \u003Cfont color=red\u003E红色框：\u003C\u002Ffont\u003E\n    docker在上一条命令构建的基础镜像之上运行一个临时容器，然后执行每一条指令，指令会对临时容器进行修改，将修改后的临时容器提交一个作为下一条命令执行的新的镜像层，然后将临时容器删除。\n\n2.  \u003Cfont color=deepskyblue\u003E蓝色框：\u003C\u002Ffont\u003E\n    蓝色框中有一行显示\"JAVA_HOME\"，这个是Dockerfile中`RUN`指令再构建镜像时执行的。\n\n## FROM指令：\n\n```dockerfile\nFROM \u003Cimage\u003E [AS \u003Cname\u003E]\nFROM \u003Cimage\u003E[:\u003Ctag\u003E] [AS \u003Cname\u003E]\nFROM \u003Cimage\u003E[@\u003Cdigest\u003E] [AS \u003Cname\u003E]\n```\n\n\u003E `FROM`是一个镜像构建开始的第一条指令，而非必须是Dockerfile文件的第一行非注释指令。\n\n#### 使用说明：\n\n1.  `FROM`之前可以有其他指令，这个指令就是`ARG`，并且是唯一一个可声明在`FROM`之前的指令，声明在`FROM`之前的`ARG`指令，因为在构建之外，所以不能在`FROM`之后的任何地方使用，在`FROM`指令前声明的`ARG`指令需要指定默认值，在构建体中使用`ARG`指令可以不用指定默认值；\n\n2.  若`FROM`指令中的参数`\u003Ctag\u003E`或`\u003Cdigest\u003E`为空，则默认为latest，如果`\u003Cimage\u003E`或`\u003Ctag\u003E`指定的镜像不存在，则返回错误。\n\n#### 构建示例：\n\n```dockerfile\nARG VERSION=8-jdk-alpine\n# 基础镜像\nFROM openjdk:$VERSION\n# 维护者信息\nLABEL maintainer=\"https://www.leafage.top/posts/detail/liwenqiang@tseveryday.com\"\n# 镜像操作指令\nRUN echo \"JAVA_HOME\"\n# 容器启动时执行的指令\nCMD [\"java -version\"]\n```\n\n#### 执行结果：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_yeoh.jpg)\n\n#### 示例执行结果说明：\n\n1.  Step 1\u002F5 显示结果可以看到指定了VERSION，且在`FROM`指令执行时，直接使用了ARG指令创建的变量；\n2.  与上面执行结果不同的是，`FROM`后面没有Pull 相关的信息，因为之前同版本的jdk镜像已经在本地镜像库中存在，docker会直接复用，而不是在重新拉去。\n\n构建完成之后，执行`doker images` 命令查看镜像信息；\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_sxXF.jpg)从结果中可以看到，openjdk的镜像只有一个，且版本号是8-jdk-alpine，关于新创建的镜像没有REPOSITORY和TAG后面再做说明；\n\n### FROM多阶段构建：\n\n在17.05版本之前的Docker，只允许Dockerfile中出现一个`FROM`指令，但在此之后，可以在一个Dockerfile中出现多个`FROM`用来实现多阶段构建。\n\n#### 使用说明：\n\n每一条 `FROM` 指令都是一个构建阶段，多条 `FROM` 就是多阶段构建，虽然最后生成的镜像只能是最后一个阶段的结果，但是，能够将前置阶段中的文件拷贝到后边的阶段中，这就是多阶段构建的最大意义。\n\n#### 构建示例：\n\n```dockerfile\n# 第一阶段构建，设置基础镜像，并设置别名在其他构建阶段可以直接使用\nFROM maven:3-jdk-8-alpine AS maven-latest\n# 维护者信息\nLABEL maintainer=\"https://www.leafage.top/posts/detail/liwenqiang@tseveryday.com\"\n# 设置工作空间，后续命令会在此目录下执行\nWORKDIR \u002Fapp\n# 添加文件到容器中\nADD . \u002Fapp\u002F\n# 执行打包命令\nRUN mvn clean package\n\n# 第二阶段构建，以第一阶段构建为基础，再次进行构建步骤\nFROM openjdk:8-jdk-alpine\n# 从第一阶段复制结果\n# 如果要用的阶段没有设置别名，那么要使用--from=n，n表示从0开始的标记位\nCOPY --from=maven-latest \u002Ftarget\u002Fdemo.jar .\n# 容器启动时执行的指令\nENTRYPOINT [\"\u002Fbin\u002Fsh\", \"-c\", \"java -jar \u002Fdemo.jar\"]\n```\n\n执行`docker build .`之后，执行构建。\n\n#### 执行结果：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_jcuj.jpg)\n\n#### 示例执行结果说明：\n\n1.  第一阶段以maven为基础镜像进行源代码的打包，第二阶段依托第一阶段的打包后的镜像进行构建；\n2.  在构建完成之后，查看镜像信息，有除了基础镜像之外有两个镜像，一个是第一阶段构建的，一个是第二阶段构建的。\n3.  通过 `docker history \u003Cimage id\u003E` 可以看到构建信息（小提示：镜像操作使用镜像ID的前4位即可）：\n    ![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_uWd1.jpg)\n\n**疑问： 为什么第一阶段构建的镜像比第二阶段构建的镜像大？**\n\n**解释：** 第一阶段构建镜像大，因为执行的`mvn clean package` 命令，会去下载项目所有的依赖jar，由于没有进行任何的删除操作，所有文件都会被保留在镜像中，这也就是在写Dockerfile需要注意的，在编写Dockerfile时候，要特别注意所有的操作不能有多余的文件或者依赖被加入，否则构建的镜像文件会比较大。\n\n第一阶段构建镜像小，因为多阶段构建的核心命令是 `FROM`。在多阶段构建中，每次 `FROM` 都会开启一个新的 Stage（阶段），可以看作一个新的 Image（不够准确、来源请求），与其它阶段隔离（甚至包括环境变量）。只有最后的 `FROM` 才会被纳入 Image 中。\n\n## RUN指令：\n\n```dockerfile\nshell 格式：RUN \u003Ccommand\u003E (\u002Fbin\u002Fsh -c \u002FS \u002FC)\nexec 格式：RUN [\"executable\", \"param1\", \"param2\"]\n```\n\n`RUN`指令将会在前一条命令创建出的镜像的基础之上创建一个容器，并在容器中运行命令，在命令结束运行后提交容器为新镜像，新镜像将被Dockerfile中的下一条指令使用。\n\n#### 使用说明：\n\n1.  使用exec格式时，命令是直接运行的，exec格式中的参数会作为JSON数组被Docker解析，所以在使用exec格式命令时，参数必须使用双引号不能单引号；\n2.  使用shell格式时，命令通过 `\u002Fbin\u002Fsh -c` 运行，可以使用反斜杠（\\\\）将单个`RUN`指令继续到下一行。\n3.  `RUN`指令将执行所有合法命令并提交执行结果，`RUN`指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定 `--no-cache` 参数，如：`docker build --no-cache`。\n\n#### 构建示例：\n\n```dockerfile\n# 基础镜像\nFROM openjdk:8-jdk-alpine AS openjdk8\n# 维护者信息\nLABEL maintainer=\"https://www.leafage.top/posts/detail/liwenqiang@tseveryday.com\"\n# 镜像操作指令\nRUN echo \"$JAVA_HOME\"\n```\n\n#### 示例执行结果说明：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_SZdw.jpg)\n从打印的日志中可以看到RUN执行了JAVA_HOME的路径打印，我们再看下镜像中的信息：![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_CIPp.jpg)\n\n## CMD指令：\n\n```dockerfile\nexec格式（推荐）：CMD [\"executable\",\"param1\",\"param2\"]\nentrypoint格式：CMD [\"param1\",\"param2\"] \nshell格式：CMD command param1 param2\n```\n\nDocker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。`CMD` 指令就是用于指定默认的容器主进程的启动命令的。它的主要目的是为执行中的容器提供默认值。\n\n使用说明：\n\n1.  shell格式和exec格式使用时，命令在容器中的运行方式和RUN一样，其规则同样适用；\n2.  每个 Dockerfile 只会执行一条`CMD`指令，如果Dockerfile中存在多条`CMD`指令命令，只有最后一条会被执行；\n3.  如果用户启动容器时候指定了运行的命令，则会覆盖掉`CMD`指定的命令。\n4.  entrypoint格式是在CMD指令和`ENTRYPOINT`指令配合时使用的，`CMD`指令中的参数会被添加到`ENTRYPOINT`指令中；\n5.  如果使用`CMD`为`ENTRYPOINT`指令提供默认参数，`CMD`和`ENTRYPOINT`指令都应以JSON数组格式指定；\n\n#### 构建示例：\n\n```dockerfile\n# 基础镜像\nFROM openjdk:8-jdk-alpine\n# 维护者信息\nLABEL maintainer=\"https://www.leafage.top/posts/detail/liwenqiang@tseveryday.com\"\n# 镜像操作指令\nCMD [\"echo\", \"$JAVA_HOME\"]\n```\n\n#### 示例执行结果说明：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_eTI0.jpg)\n可以从结果看到`CMD [\"echo\"，\"\\$JAVA_HOME\"]`不会在$JAVA_HOME上进行可变替换。如果想要shell处理，使用shell形式或直接执行一个shell，例如：`CMD [\"sh\",\"-c\",\"echo JAVA_HOME\"]`\n\n## LABEL指令：\n\n```dockerfile\nLABEL \u003Ckey\u003E=\u003Cvalue\u003E \u003Ckey\u003E=\u003Cvalue\u003E \u003Ckey\u003E=\u003Cvalue\u003E ...\n```\n\n#### 使用说明：\n\n1.  LABEL指令以key=value方式给镜像添加元数据，要在`LABEL`值中包含空格，请使用引号和反斜杠，就像在命令行解析中一样；\n2.  基础镜像、父镜像中包含的标签会被继承，如果镜像中标签已经存在但具有不同的值，则后面设置的值会覆盖先前设置的值；\n3.  一个镜像中可以有多个标签。您可以在一行上指定多个标签。\n\n#### 构建示例：\n\n```dockerfile\n# 基础镜像\nFROM openjdk:8-jdk-alpine AS openjdk8\n# 维护者信息\nLABEL maintainer=\"https://www.leafage.top/posts/detail/liwenqiang@tseveryday.com\"\n# 多标签：标记版本号及描述信息，\nLABEL version=\"1.0\" description=\"This text illustrates \\\nthat label-values can span multiple lines.\"\n```\n\n使用`docker inspect`命令查看image的labels\n\n#### 示例执行结果说明：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_ETqG.jpg)  \n每个`LABEL`指令产生一个新层，如果使用许多标签，可能会导致效率低下。如果Docker遇到已经存在的label\u002Fkey，则新值将覆盖具有相同键的任何先前标签。\n\n## EXPOSE指令：\n\n```dockerfile\nEXPOSE \u003Cport\u003E [\u003Cport\u003E\u002F\u003Cprotocol\u003E...]\n```\n\n`EXPOSE`指令通知Docker容器在运行时监听指定的网络端口，可以指定端口是侦听TCP还是UDP，如果未指定协议，则默认值为TCP。\n\n#### 使用说明：\n\n1.  无论`EXPOSE`设置如何，都可以在运行时使用`-p`参数覆盖它们，例如：docker run -p 8080:80；\n2.  `EXPOSE` 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会对外暴露这个端口，只有在`docker run` 时显示指定 -p \\[外部端口\\]:\\[容器端口\\]，才会对外暴露。\n\n在 Dockerfile 中使用EXPOSE声明端口有两个好处：\n\n1.  帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；\n2.  在运行时使用随机端口映射时，也就是 `docker run -P` 时，会自动随机映射 `EXPOSE` 的端口。\n\n## ENV指令：\n\n```dockerfile\n设置一个：ENV \u003Ckey\u003E \u003Cvalue\u003E\n设置多个：ENV \u003Ckey\u003E=\u003Cvalue\u003E \u003Ckey1\u003E=\u003Cvalue1\u003E ...\n```\n\n`ENV`指令将镜像运行时环境变量`\u003Ckey\u003E`设置为`\u003Cvalue\u003E`。此值将在构建阶段中所有后续指令的环境中使用，并且在许多情况下也可以内联替换。\n\n可以通过命令：`docker run -e \"key=value\"`来覆盖Dockerfile中的设置项的值。\n\n#### 使用说明：\n\n1.  设置一个时，第一个空格后面的整个字符串将被视为`\u003Cvalue\u003E` 包括空格和引号等字符；\n2.  设置多个时，这种形式在语法中使用\"=\"，与命令行解析一样，引号和反斜杠可用于在值内包含空格。\n\n```dockerfile\nFROM openjdk:8-jdk-alpine\n# 维护者信息\nLABEL maintainer=\"https://www.leafage.top/posts/detail/liwenqiang@tseveryday.com\"\n# Pointer a active profile\nENV JAR=demo VERSION=0.0.1-RELEASE\n# Run the jar file\nENTRYPOINT [\"\u002Fbin\u002Fsh\", \"-c\", \"java -jar \u002Ftarget\u002F${JAR}-${VERSION}.jar\"]\n```\n\n#### 执行结果：\n\n通过docker inspect 查看镜像信息：=![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_OQ7R.jpg)\n\n## ADD指令：\n\n```dockerfile\nADD [--chown=\u003Cuser\u003E:\u003Cgroup\u003E] \u003Csrc\u003E... \u003Cdest\u003E\nADD [--chown=\u003Cuser\u003E:\u003Cgroup\u003E] [\"\u003Csrc\u003E\",... \"\u003Cdest\u003E\"]\n```\n\n注：–chown 仅在用于在Linux上构建容器时的Dockerfile上可用，在Windows容器上不起作用\n\n`ADD`指令是有上下文的（默认为当前Dockerfile所在目录），从Dockerfile文件相对的`\u003Csrc\u003E`路径下复制其下的文件\u002F文件夹到Docker镜像的工作目录下的相对的`\u003Cdest\u003E`目录。\n\n例如：linux的\u002Fhome\u002Fuser\u002Fsrc下执行Dockerfile构建镜像，要添加\u002Fhome\u002Fuser\u002Fsrc\u002Fdemo文件夹所有内容到docker镜像的\u002Fapp工作目录下，需要设置`ADD . \u002Fapp\u002F` 。\n\n`\u003Csrc\u003E`也可以为远程文件URL，当`\u003Csrc\u003E`是远程文件URL的情况下，目标将具有600的权限。如果正在检索的远程文件具有HTTP Last-Modified 的标头，则来自该标头的时间戳将用于设置目的地上的mtime文件，另外像在`ADD`期间处理的任何其它文件一样，mtime将不包括在确定文件是否已经改变并且高速缓存应该被更新。\n\n#### 规则：\n\n-   `\u003Csrc\u003E`路径必须在构建的上下文中，不能`ADD ..\u002Fsomething \u002Ftarget`，因为docker构建的第一步是发送上下文目录（和子目录）到docker守护进程。\n-   如果`\u003Csrc\u003E`是URL并且`\u003Cdest\u003E`不以尾部斜杠结尾，则从URL下载文件并将其复制到`\u003Cdest\u003E`。\n-   如果`\u003Csrc\u003E`是URL并且`\u003Cdest\u003E`以尾部斜杠结尾，则从URL中推断文件名，并将文件下载到`\u003Cdest\u003E\u002F\u003Cfilename\u003E`。例如，`ADD http:\u002F\u002Fexample.com\u002Ffoobar \u002F`会创建文件\u002Ffoobar。网址必须有一个非平凡的路径，以便在这种情况下可以发现一个适当的文件名（http:\u002F\u002Fexample.com不会工作）。\n\n#### 使用说明：\n\n1.  `\u003Csrc\u003E`资源可以指定多个，但如果指定的是文件或目录，会被解析为基于镜像上下文的相对路径。\n2.  如果`\u003Csrc\u003E`是目录，则复制目录的整个内容，包括文件系统元数据。\n3.  如果URL文件使用身份验证保护，则需要使用`RUN wget`，`RUN curl`或从容器内使用其他工具，因为`ADD`指令不支持身份验证。\n4.  在Dockerfile构建镜像时使用`docker build - \u003Csomefile`构建，这时没有构建上下文，所以Dockerfile只能包含一个基于URL的`ADD`指令。\n5.  可以通过命令传递压缩归档文件：`docker build - \u003Carchive.tar.gz`，归档根目录下的Dockerfile和归档的其余部分将在构建的上下文中使用。\n6.  如果`\u003Csrc\u003E`是识别的压缩格式（identity，gzip，bzip2或xz）的本地tar存档，则将其解包为目录（识别是基于文件内容的而不是文件名，例如文件名是demo.tar.gz，但是文件是空的，就不会去解压）。来自远程URL的资源不会解压缩。\n7.  如果直接或由于使用通配符指定了多个`\u003Csrc\u003E`资源，则`\u003Cdest\u003E`必须是目录，并且必须以斜杠\u002F结尾。\n8.  如果`\u003Cdest\u003E`不以尾部斜杠结尾，它将被视为常规文件，`\u003Csrc\u003E`的内容将写在`\u003Cdest\u003E`。\n9.  如果`\u003Cdest\u003E`不存在，则会与其路径中的所有缺少的目录一起创建。\n\n#### 构建示例：\n\n```dockerfile\n# 设置基础镜像\nFROM openjdk:8-jdk-alpine\n# 复制jar包到镜像中\nADD https:\u002F\u002Foss.abeille.top\u002Fdemo-0.0.1-SNAPSHOT.jar .\n# 容器启动时执行的指令\nENTRYPOINT [\"\u002Fbin\u002Fsh\", \"-c\", \"https://www.leafage.top/posts/detail/java -jar demo-0.0.1-SNAPSHOT.jar\"]\n```\n\n#### 执行结果：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_L3Ty.jpg)通过结果可以看到，镜像在构建过程中会把远程地址的文件下载并写入镜像的上下文的根目录 . 中，构建完成之后启动镜像验证结果，结果打印了正常的服务日志，说明构建的镜像是可以使用的。\n\n## COPY指令：\n\n```dockerfile\nCOPY [--chown=\u003Cuser\u003E:\u003Cgroup\u003E] \u003Csrc\u003E... \u003Cdest\u003E\nCOPY [--chown=\u003Cuser\u003E:\u003Cgroup\u003E] [\"\u003Csrc\u003E\",... \"\u003Cdest\u003E\"]\n```\n\n注：–chown仅在用于在Linux上构建容器时的Dockerfile上可用，在Windows容器上不起作用  \n–chown标志指定给定的用户名，组名或UID \u002F GID组合以请求对复制内容的特定所有权\n\n`COPY` 指令复制`\u003Csrc\u003E`所指向的文件或目录，将它添加到新镜像中，复制的文件或目录在镜像中的路径是`\u003Cdest\u003E`。`\u003Csrc\u003E`所指定的源可以有多个，但必须在上下文中，即必须是上下文根目录的相对路径。\n\n#### 使用说明：\n\n1.  `\u003Csrc\u003E`可以使用通配符指向所有匹配通配符的文件或目录；\n2.  `\u003Cdest\u003E`可以是文件或目录，但是必须是目标镜像中的绝对路径或者相对于WORKDIR 的相对路径；\n3.  若`\u003Csrc\u003E`或`\u003Cdest\u003E`以斜杠\u002F结尾，则其指向的是目录，否则指向文件。\n4.  若`\u003Cdest\u003E`是一个文件，则`\u003Csrc\u003E`的内容会被写入到`\u003Cdest\u003E`中，否则`\u003Csrc\u003E`所指向的文件或目录中的内容会被复制添加到`\u003Cdest\u003E`目录中。\n5.  当`\u003Csrc\u003E`指定多个源时，`\u003Cdest\u003E`必须是目录，如果`\u003Cdest\u003E`不存在，则会被创建。\n\n#### 构建示例：\n\n```dockerfile\n# 设置基础镜像\nFROM openjdk:8-jdk-alpine\n# 复制jar包到镜像中\nCOPY \u002Ftarget\u002Fdemo-0.0.1-SNAPSHOT.jar .\n# 容器启动时执行的指令\nENTRYPOINT [\"\u002Fbin\u002Fsh\", \"-c\", \"https://www.leafage.top/posts/detail/java -jar demo-0.0.1-SNAPSHOT.jar\"]\n```\n\n#### 示例执行结果说明：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_N9qn.jpg)上图是执行结果可以看到，在指定的路径下文件不存在时，会打印异常信息，且构建过程会终止但是之前执行的步骤生成的镜像还是会在docker daemon缓存中存在。这是因为`\u003Cdest\u003E`不是以斜杠结尾，所以就会把demo.jar 写入到`\u003Cdest\u003E`，但是这个demo.jar又不存在，所以写入的时候发生异常。\n\n修改示例为正确路径文件后，在执行构建，并运行镜像，就会打印服务启动的日志。![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_DYtd.jpg)\n\n## ENTRYPOINT指令：\n\n```dockerfile\nexec格式：ENTRYPOINT [\"executable\", \"param1\", \"param2\"]\nshell格式：ENTRYPOINT command param1 param2\n```\n\n`ENTRYPOINT`指令和 `CMD` 相似，都可以让容器在每次启动时执行相同的命令，但是又有不同的地方，`CMD`可以是命令，也可以是参数，而`ENTRYPOINT`只能是命令。\n\n#### 使用说明：\n\n1.  在使用shell格式时，`ENTRYPOINT`指令会忽略所有的`CMD`指令和docker run 命令的参数，并且会运行在 \u002Fbin\u002Fsh -c 中，这就说明`ENTRYPOINT`指令进程为 \u002Fbin\u002Fsh -c 的子进程，进程在容器中的PID不是1，且不接受Unix信号，即在使用docker stop 命令时，命令进程接收不到SIGTERM信号；\n2.  `ENTRYPOINT` 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 `docker run --entrypoint`来指定；\n3.  当指定了 `ENTRYPOINT` 后，`CMD` 的含义就发生了改变，不再是直接的运行其命令，而是将 `CMD` 的内容作为参数传给 `ENTRYPOINT` 指令；\n4.  在一个Dockerfile 中可以有多条`ENTRYPOINT`指令，但是只有最后一条有效；\n5.  使用exec格式时，`docker run` 传入的命令会覆盖CMD指令的内容并且附加到`ENTRYPOINT`指令的参数中，而不会覆盖`ENTRYPOINT`指令的参数。\n\n#### 构建示例：\n\n```dockerfile\nFROM openjdk:8-jdk-alpine\n# 复制jar包到镜像中\nADD \u002Ftarget\u002Fdemo-0.0.1-SNAPSHOT.jar .\n# 容器启动时执行的指令\nENTRYPOINT [\"\u002Fbin\u002Fsh\", \"-c\", \"https://www.leafage.top/posts/detail/java -jar demo-0.1.0-SNAPSHOT.jar\"]\nENTRYPOINT [\"\u002Fbin\u002Fsh\", \"-c\", \"https://www.leafage.top/posts/detail/java -jar demo-0.0.1-SNAPSHOT.jar\"]\n```\n\n#### 示例执行结果说明：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104311_NbWg.jpg)通过构建过成可以看到，在构建时，并不会执行`ENTRYPOINT`的命令，当我们启动镜像时才会执行其中的ENTRYPOINT，虽然设置了两个`ENTRYPOINT`指令，但是只执行了`java -jar demo-0.0.1-SNAPSHOT.jar`命令来启动服务，因为 demo-0.1.0-SNAPSHOT.jar 这个并不存在，如果会执行第一个`ENTRYPOINT`的话，启动一个不存在的jar肯定是会发生异常。这也印证了使用说明中的第4条。\n\n## VOLUME指令：\n\n```dockerfile\nVOLUME [\"\u002Fdata\"]\n```\n\n`VOLUME`指令创建具有指定名称的挂载点，并将其标记为从本机主机或其他容器保留外部挂载的卷。该值可以是JSON数组VOLUME \\[\"\u002Fvar\u002Flog\u002F\"\\]或具有多个参数的纯字符串。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。\n\n#### 使用说明：\n\n1.  基于Windows的容器上的卷：使用基于Windows的容器时，容器内的卷的目表地址必须是不存在或空目录，并且不能是 C 盘下的目录。\n2.  主机目录是在容器运行时声明的：主机目录（挂载点）从本质上说是依赖于主机的。这是为了保留镜像的可移植性，因为不能保证给定的主机目录在所有主机上都可用。因此，无法从Dockerfile内挂载主机目录。该`VOLUME`指令不支持指定host-dir 参数。创建或运行容器时，必须指定安装点。\n\n#### 构建示例：\n\n```dockerfile\nFROM openjdk:8-jdk-alpine\nVOLUME \u002Fdata\n```\n\n#### 示例执行结果说明：\n\n#### 疑问：\n\nDockerfile 中有一个 `VOLUME` 命令，可以把挂载一个目录到主机目录，但是在主机目录下的名字是随机的，除非用户用 -v 指定，但是如果在 Dockerfile 中不用 `VOLUME`，只在运行时用 -v 指定也能达到效果，那么就有一个问题，`VOLUME` 在 Dockerfile 中到底有多少用，在 Host 下创建了几个用户一般找不到的文件到底有多少使用价值，大部分情况下用户都是要手动使用 -v 重新指定挂载目录，那 `VOLUME` 命令就显得很鸡肋。\n\n#### 解释：\n\n可以把`VOLUME`理解为，从镜像中复制指定卷的文件夹到本地 \u002Fvar\u002Flib\u002Fdocker\u002Fvolumes\u002Fxxxxxxxxx\u002F 文件夹，然后把本地的该文件夹挂载到容器里面去。\n\n因为VOLUME实际上就是在本地新建了一个文件夹挂载了，那么实际上容器内部的文件夹有三种情况：\n\n1.  没有指定`VOLUME`也没有指定`-v`，这种是普通文件夹。\n2.  指定了`VOLUME`没有指定`-v`，这种文件夹可以在不同容器之间共享，但是无法在本地修改。\n3.  指定了`-v`的文件夹，这种文件夹可以在不同容器之间共享，且可以在本地修改。\n\n## USER指令：\n\n```dockerfile\nUSER \u003Cuser\u003E[:\u003Cgroup\u003E]\nUSER \u003CUID\u003E[:\u003CGID\u003E]\n```\n\n指定运行容器时的用户名或 UID，后续的 `RUN` 也会使用指定用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。\n\n#### 使用说明：\n\n1.  在Windows上，如果不是内置帐户，则必须首先创建用户。这可以通过`net user`作为Dockerfile的一部分调用的命令来完成。\n2.  当用户没有主要组时，镜像（或后续说明）将与该root组一起运行。\n\n#### 构建示例：\n\n```dockerfile\nRUN groupadd -r dev && useradd -r -g dev dev\nUSER dev\nRUN [ \"systemctl start elasticsearch\" ]\n```\n\n## WORKDIR指令：\n\n```dockerfile\nWORKDIR \u002Fpath\u002Fto\u002Fworkdir\n```\n\n为后续的 `RUN`、`CMD`、`ENTRYPOINT` 指令配置工作目录，在`WORKDIR`指令之前执行的指令，由于没有设置`WORKDIR`，它默认为当前镜像构建的上下文根目录，所以会基于根目录执行。\n\n#### 使用说明：\n\n1.  `WORKDIR`指令可以解析先前使用ENV设置的环境变量。您只能使用在Dockerfile中显式设置的环境变量；\n2.  可以使用多个 `WORKDIR` 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。\n\n#### 构建示例：\n\n```dockerfile\nFROM openjdk:8-jdk-alpine\nWORKDIR \u002Feveryday\nWORKDIR chain\nRUN pwd\n```\n\n#### 示例执行结果说明：\n\n![image.png](https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104311_ea1H.jpg)\n\n## ARG指令：\n\n```dockerfile\nARG \u003Cname\u003E[=\u003Cdefault value\u003E]\n```\n\n构建参数和 `ENV` 的效果一样，都是设置环境变量。所不同的是，`ARG` 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。通过 `docker history` 可以看到所有设置的值。\n\n#### 使用说明：\n\n1.  不使用build-time变量来传递诸如github密钥，用户凭证等密码。构建时变量值使用docker history命令对图像的任何用户可见；\n2.  ARG 指令定义参数的默认值可以在 `docker build` 中用 `--build-arg \u003Ckey\u003E=\u003Cvalue\u003E` 来覆盖；\n3.  在 1.13 之前的版本，要求 `--build-arg` 中的参数名，必须在 Dockerfile 中用 `ARG` 定义过了，就是 `--build-arg` 指定的参数，必须在Dockerfile 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。\n\n#### 构建示例：\n\n```dockerfile\nARG VERSION=8-jdk-alpine\n# 基础镜像\nFROM openjdk:$VERSION\nARG VERSION\nRUN echo $VERSION \u003E java_version\n```\n\n## ONBUILD指令：\n\n```dockerfile\nONBUILD [INSTRUCTION]\n```\n\n`ONBUILD` 是一个特殊的指令，它的功能时添加一个将来执行的触发器指令到镜像中，它后面跟的是其它指令，比如 `RUN`, `COPY` 等，而这些指令，在当前镜像构建时并不会被执行，当该镜像作为`FROM`指令的参数时， 这些触发器指令就会在`FROM`指令执行时加入到构建中。当需要构建一个基础镜像时，`ONBUILD`是很有用的。\n\n#### ONBUILD指令具体执行步骤：\n\n1.  在构建过程中，ONBUILD指令会添加到触发器指令镜像的云数据中，这些触发器不会再当前构建中执行；\n2.  在构建过程最后，触发器指令会被存储在镜像详情中，其主键是OnBuild，可以使用docker inspect命令查看；\n3.  构建完成后，该镜像可能作为其他Dockerfile中的`FROM`指令的参数，在构建时`FROM`指令会寻找`ONBUILD`触发器指令，并且会以它们注册的顺序执行。如果有触发器执行失败，则`FROM`指令被中止，并返回失败；如果所有的触发器执行成功，则`FROM`会执行下面的命令。在镜像构建完成后，触发器会被清除，不会被子孙镜像继承。\n\n#### 使用说明：\n\n1.  `ONBUILD`指令中不能包含 `ONBUILD`指令，并且不会触发`FROM`指令；\n2.  使用`ONBUILD`指令的Dockerfile构建的镜像应该有特殊的标签，例如：demo:1.1.0-onbuild，这样做的好处是提示开发人员要在使用时注意；\n3.  在`ONBUILD`指令中添加`ADD`和`COPY`指令时要特别注意，假如新构建过程的被添加的资源缺失了，会导致构建失败；",catalog:c},previous:{code:"21414BX0U",modifyTime:"2021-04-14T19:28:14.661",title:"vue3+typescript上传文件到七牛云",subtitle:"七牛云js-sdk上传文件，本地js生成token，直传模式上传文件到七牛云",cover:"https:\u002F\u002Fcdn.leafage.top\u002Fsnowdrop.jpg",tags:["vue-1.js"/*tpa=https://www.leafage.top/posts/detail/vue.js*/,"vue3","七牛云","qiniu-js","上传","前端上传"],category:c,likes:3,comment:a,viewed:78},next:{code:"21525BRK1",modifyTime:"2021-05-25T09:16:02.206",title:"CentOS7开启端口（永久）",subtitle:"服务启动后，外网默认是无法访问的，因为防火墙不允许，所以要开启防火墙，让其可以访问这些端口号",cover:"https:\u002F\u002Fcdn.leafage.top\u002Fhamburg-2111613.jpg",tags:["防火墙","端口号","firewall","centos"],category:c,likes:a,comment:a,viewed:23},topDatas:[{code:l,modifyTime:m,title:n,subtitle:o,cover:p,tags:[q,r,s,t,u,v],category:b,likes:w,comment:a,viewed:x},{code:y,modifyTime:z,title:A,subtitle:B,cover:C,tags:[e,f,g,d,D],category:b,likes:E,comment:a,viewed:F},{code:G,modifyTime:H,title:I,subtitle:J,cover:K,tags:[d,L,M,N,O],category:b,likes:P,comment:a,viewed:Q}],rendered:"\u003Ch1\u003EDockerfile\u003C\u002Fh1\u003E\n\u003Cp\u003EDockerfile 描述了组装镜像的步骤，其中每条指令都是单独执行的。除了FROM指令，其他每一条指令都会在上一条指令所生成镜像的基础上执行，执行完后会生成一个新的镜像层，新的镜像层覆盖在原来的镜像之上从而形成了新的镜像。Dockerfile所生成的最终镜像就是在基础镜像上面叠加一层层的镜像层组件的。Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。\u003C\u002Fp\u003E\n\u003Cp\u003EDockerfile 中指令不区分大小写，以 “#” 开头的是注释行，而在其他位置出现的 “#” 会被当成参数。\u003C\u002Fp\u003E\n\u003Ch4\u003E基础示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E# 基础镜像\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine AS openjdk8\n\u003Cspan class=\"hljs-comment\"\u003E# 维护者信息\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ELABEL\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E maintainer=\u003Cspan class=\"hljs-string\"\u003E&quot;liwenqiang@tseveryday.com&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 镜像操作指令\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ERUN\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E \u003Cspan class=\"hljs-built_in\"\u003Eecho\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;JAVA_HOME&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 容器启动时执行的指令\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ECMD\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;java -version&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Cstrong\u003E基础镜像推荐使用alpine版本的，这个会使得基础镜像很轻\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E非alpine版本的镜像：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104308_v1le.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Ealpine版本的镜像：\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_pYZA.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E执行\u003Ccode\u003Edocker build .\u003C\u002Fcode\u003E来构建镜像\u003C\u002Fp\u003E\n\u003Ch4\u003E执行结果：\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_GkEt.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E示例执行结果说明：\u003C\u002Fh4\u003E\n\u003Cp\u003E通过执行结果可以看到，第一次构建，没有基础镜像openjdk:8-jdk-alpine，自动去docker hub上拉取镜像。\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Cfont color=red\u003E红色框：\u003C\u002Ffont\u003E\u003Cbr \u002F\u003E\ndocker在上一条命令构建的基础镜像之上运行一个临时容器，然后执行每一条指令，指令会对临时容器进行修改，将修改后的临时容器提交一个作为下一条命令执行的新的镜像层，然后将临时容器删除。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Cfont color=deepskyblue\u003E蓝色框：\u003C\u002Ffont\u003E\u003Cbr \u002F\u003E\n蓝色框中有一行显示&quot;JAVA_HOME&quot;，这个是Dockerfile中\u003Ccode\u003ERUN\u003C\u002Fcode\u003E指令再构建镜像时执行的。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2\u003EFROM指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E &lt;image&gt; [AS &lt;name&gt;]\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ccode\u003EFROM\u003C\u002Fcode\u003E是一个镜像构建开始的第一条指令，而非必须是Dockerfile文件的第一行非注释指令。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ccode\u003EFROM\u003C\u002Fcode\u003E之前可以有其他指令，这个指令就是\u003Ccode\u003EARG\u003C\u002Fcode\u003E，并且是唯一一个可声明在\u003Ccode\u003EFROM\u003C\u002Fcode\u003E之前的指令，声明在\u003Ccode\u003EFROM\u003C\u002Fcode\u003E之前的\u003Ccode\u003EARG\u003C\u002Fcode\u003E指令，因为在构建之外，所以不能在\u003Ccode\u003EFROM\u003C\u002Fcode\u003E之后的任何地方使用，在\u003Ccode\u003EFROM\u003C\u002Fcode\u003E指令前声明的\u003Ccode\u003EARG\u003C\u002Fcode\u003E指令需要指定默认值，在构建体中使用\u003Ccode\u003EARG\u003C\u002Fcode\u003E指令可以不用指定默认值；\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E若\u003Ccode\u003EFROM\u003C\u002Fcode\u003E指令中的参数\u003Ccode\u003E&lt;tag&gt;\u003C\u002Fcode\u003E或\u003Ccode\u003E&lt;digest&gt;\u003C\u002Fcode\u003E为空，则默认为latest，如果\u003Ccode\u003E&lt;image&gt;\u003C\u002Fcode\u003E或\u003Ccode\u003E&lt;tag&gt;\u003C\u002Fcode\u003E指定的镜像不存在，则返回错误。\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EARG\u003C\u002Fspan\u003E VERSION=\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine\n\u003Cspan class=\"hljs-comment\"\u003E# 基础镜像\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:$VERSION\n\u003Cspan class=\"hljs-comment\"\u003E# 维护者信息\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ELABEL\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E maintainer=\u003Cspan class=\"hljs-string\"\u003E&quot;liwenqiang@tseveryday.com&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 镜像操作指令\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ERUN\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E \u003Cspan class=\"hljs-built_in\"\u003Eecho\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;JAVA_HOME&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 容器启动时执行的指令\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ECMD\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;java -version&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E执行结果：\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_yeoh.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E示例执行结果说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003EStep 1\u002F5 显示结果可以看到指定了VERSION，且在\u003Ccode\u003EFROM\u003C\u002Fcode\u003E指令执行时，直接使用了ARG指令创建的变量；\u003C\u002Fli\u003E\n\u003Cli\u003E与上面执行结果不同的是，\u003Ccode\u003EFROM\u003C\u002Fcode\u003E后面没有Pull 相关的信息，因为之前同版本的jdk镜像已经在本地镜像库中存在，docker会直接复用，而不是在重新拉去。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E构建完成之后，执行\u003Ccode\u003Edoker images\u003C\u002Fcode\u003E 命令查看镜像信息；\u003Cbr \u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_sxXF.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E从结果中可以看到，openjdk的镜像只有一个，且版本号是8-jdk-alpine，关于新创建的镜像没有REPOSITORY和TAG后面再做说明；\u003C\u002Fp\u003E\n\u003Ch3\u003EFROM多阶段构建：\u003C\u002Fh3\u003E\n\u003Cp\u003E在17.05版本之前的Docker，只允许Dockerfile中出现一个\u003Ccode\u003EFROM\u003C\u002Fcode\u003E指令，但在此之后，可以在一个Dockerfile中出现多个\u003Ccode\u003EFROM\u003C\u002Fcode\u003E用来实现多阶段构建。\u003C\u002Fp\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Cp\u003E每一条 \u003Ccode\u003EFROM\u003C\u002Fcode\u003E 指令都是一个构建阶段，多条 \u003Ccode\u003EFROM\u003C\u002Fcode\u003E 就是多阶段构建，虽然最后生成的镜像只能是最后一个阶段的结果，但是，能够将前置阶段中的文件拷贝到后边的阶段中，这就是多阶段构建的最大意义。\u003C\u002Fp\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E# 第一阶段构建，设置基础镜像，并设置别名在其他构建阶段可以直接使用\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E maven:\u003Cspan class=\"hljs-number\"\u003E3\u003C\u002Fspan\u003E-jdk-\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-alpine AS maven-latest\n\u003Cspan class=\"hljs-comment\"\u003E# 维护者信息\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ELABEL\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E maintainer=\u003Cspan class=\"hljs-string\"\u003E&quot;liwenqiang@tseveryday.com&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 设置工作空间，后续命令会在此目录下执行\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EWORKDIR\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E \u002Fapp\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 添加文件到容器中\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EADD\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E . \u002Fapp\u002F\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 执行打包命令\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ERUN\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E mvn clean package\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-comment\"\u003E# 第二阶段构建，以第一阶段构建为基础，再次进行构建步骤\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine\n\u003Cspan class=\"hljs-comment\"\u003E# 从第一阶段复制结果\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 如果要用的阶段没有设置别名，那么要使用--from=n，n表示从0开始的标记位\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ECOPY\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E --from=maven-latest \u002Ftarget\u002Fdemo.jar .\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 容器启动时执行的指令\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EENTRYPOINT\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;\u002Fbin\u002Fsh&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;-c&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;java -jar \u002Fdemo.jar&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E执行\u003Ccode\u003Edocker build .\u003C\u002Fcode\u003E之后，执行构建。\u003C\u002Fp\u003E\n\u003Ch4\u003E执行结果：\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_jcuj.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch4\u003E示例执行结果说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E第一阶段以maven为基础镜像进行源代码的打包，第二阶段依托第一阶段的打包后的镜像进行构建；\u003C\u002Fli\u003E\n\u003Cli\u003E在构建完成之后，查看镜像信息，有除了基础镜像之外有两个镜像，一个是第一阶段构建的，一个是第二阶段构建的。\u003C\u002Fli\u003E\n\u003Cli\u003E通过 \u003Ccode\u003Edocker history &lt;image id&gt;\u003C\u002Fcode\u003E 可以看到构建信息（小提示：镜像操作使用镜像ID的前4位即可）：\u003Cbr \u002F\u003E\n\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_uWd1.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E\u003Cstrong\u003E疑问： 为什么第一阶段构建的镜像比第二阶段构建的镜像大？\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cstrong\u003E解释：\u003C\u002Fstrong\u003E 第一阶段构建镜像大，因为执行的\u003Ccode\u003Emvn clean package\u003C\u002Fcode\u003E 命令，会去下载项目所有的依赖jar，由于没有进行任何的删除操作，所有文件都会被保留在镜像中，这也就是在写Dockerfile需要注意的，在编写Dockerfile时候，要特别注意所有的操作不能有多余的文件或者依赖被加入，否则构建的镜像文件会比较大。\u003C\u002Fp\u003E\n\u003Cp\u003E第一阶段构建镜像小，因为多阶段构建的核心命令是 \u003Ccode\u003EFROM\u003C\u002Fcode\u003E。在多阶段构建中，每次 \u003Ccode\u003EFROM\u003C\u002Fcode\u003E 都会开启一个新的 Stage（阶段），可以看作一个新的 Image（不够准确、来源请求），与其它阶段隔离（甚至包括环境变量）。只有最后的 \u003Ccode\u003EFROM\u003C\u002Fcode\u003E 才会被纳入 Image 中。\u003C\u002Fp\u003E\n\u003Ch2\u003ERUN指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003Eshell\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E 格式：RUN &lt;\u003Cspan class=\"hljs-built_in\"\u003Ecommand\u003C\u002Fspan\u003E&gt; (\u002Fbin\u002Fsh -c \u002FS \u002FC)\u003C\u002Fspan\u003E\nexec 格式：\u003Cspan class=\"hljs-keyword\"\u003ERUN\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;executable&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;param1&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;param2&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003ERUN\u003C\u002Fcode\u003E指令将会在前一条命令创建出的镜像的基础之上创建一个容器，并在容器中运行命令，在命令结束运行后提交容器为新镜像，新镜像将被Dockerfile中的下一条指令使用。\u003C\u002Fp\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E使用exec格式时，命令是直接运行的，exec格式中的参数会作为JSON数组被Docker解析，所以在使用exec格式命令时，参数必须使用双引号不能单引号；\u003C\u002Fli\u003E\n\u003Cli\u003E使用shell格式时，命令通过 \u003Ccode\u003E\u002Fbin\u002Fsh -c\u003C\u002Fcode\u003E 运行，可以使用反斜杠（\\）将单个\u003Ccode\u003ERUN\u003C\u002Fcode\u003E指令继续到下一行。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003ERUN\u003C\u002Fcode\u003E指令将执行所有合法命令并提交执行结果，\u003Ccode\u003ERUN\u003C\u002Fcode\u003E指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定 \u003Ccode\u003E--no-cache\u003C\u002Fcode\u003E 参数，如：\u003Ccode\u003Edocker build --no-cache\u003C\u002Fcode\u003E。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E# 基础镜像\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine AS openjdk8\n\u003Cspan class=\"hljs-comment\"\u003E# 维护者信息\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ELABEL\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E maintainer=\u003Cspan class=\"hljs-string\"\u003E&quot;liwenqiang@tseveryday.com&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 镜像操作指令\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ERUN\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E \u003Cspan class=\"hljs-built_in\"\u003Eecho\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003E&quot;\u003Cspan class=\"hljs-variable\"\u003E$JAVA_HOME\u003C\u002Fspan\u003E&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E示例执行结果说明：\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_SZdw.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003Cbr \u002F\u003E\n从打印的日志中可以看到RUN执行了JAVA_HOME的路径打印，我们再看下镜像中的信息：\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104309_CIPp.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003ECMD指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Eexec格式（推荐）：\u003Cspan class=\"hljs-keyword\"\u003ECMD\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;executable&quot;\u003C\u002Fspan\u003E,\u003Cspan class=\"hljs-string\"\u003E&quot;param1&quot;\u003C\u002Fspan\u003E,\u003Cspan class=\"hljs-string\"\u003E&quot;param2&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eentrypoint\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E格式：CMD [\u003Cspan class=\"hljs-string\"\u003E&quot;param1&quot;\u003C\u002Fspan\u003E,\u003Cspan class=\"hljs-string\"\u003E&quot;param2&quot;\u003C\u002Fspan\u003E] \u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eshell\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E格式：CMD \u003Cspan class=\"hljs-built_in\"\u003Ecommand\u003C\u002Fspan\u003E param1 param2\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EDocker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。\u003Ccode\u003ECMD\u003C\u002Fcode\u003E 指令就是用于指定默认的容器主进程的启动命令的。它的主要目的是为执行中的容器提供默认值。\u003C\u002Fp\u003E\n\u003Cp\u003E使用说明：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003Eshell格式和exec格式使用时，命令在容器中的运行方式和RUN一样，其规则同样适用；\u003C\u002Fli\u003E\n\u003Cli\u003E每个 Dockerfile 只会执行一条\u003Ccode\u003ECMD\u003C\u002Fcode\u003E指令，如果Dockerfile中存在多条\u003Ccode\u003ECMD\u003C\u002Fcode\u003E指令命令，只有最后一条会被执行；\u003C\u002Fli\u003E\n\u003Cli\u003E如果用户启动容器时候指定了运行的命令，则会覆盖掉\u003Ccode\u003ECMD\u003C\u002Fcode\u003E指定的命令。\u003C\u002Fli\u003E\n\u003Cli\u003Eentrypoint格式是在CMD指令和\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E指令配合时使用的，\u003Ccode\u003ECMD\u003C\u002Fcode\u003E指令中的参数会被添加到\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E指令中；\u003C\u002Fli\u003E\n\u003Cli\u003E如果使用\u003Ccode\u003ECMD\u003C\u002Fcode\u003E为\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E指令提供默认参数，\u003Ccode\u003ECMD\u003C\u002Fcode\u003E和\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E指令都应以JSON数组格式指定；\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E# 基础镜像\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine\n\u003Cspan class=\"hljs-comment\"\u003E# 维护者信息\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ELABEL\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E maintainer=\u003Cspan class=\"hljs-string\"\u003E&quot;liwenqiang@tseveryday.com&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 镜像操作指令\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ECMD\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;echo&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;\u003Cspan class=\"hljs-variable\"\u003E$JAVA_HOME\u003C\u002Fspan\u003E&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E示例执行结果说明：\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_eTI0.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003Cbr \u002F\u003E\n可以从结果看到\u003Ccode\u003ECMD [&quot;echo&quot;，&quot;\\$JAVA_HOME&quot;]\u003C\u002Fcode\u003E不会在$JAVA_HOME上进行可变替换。如果想要shell处理，使用shell形式或直接执行一个shell，例如：\u003Ccode\u003ECMD [&quot;sh&quot;,&quot;-c&quot;,&quot;echo JAVA_HOME&quot;]\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003ELABEL指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003ELABEL\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003ELABEL指令以key=value方式给镜像添加元数据，要在\u003Ccode\u003ELABEL\u003C\u002Fcode\u003E值中包含空格，请使用引号和反斜杠，就像在命令行解析中一样；\u003C\u002Fli\u003E\n\u003Cli\u003E基础镜像、父镜像中包含的标签会被继承，如果镜像中标签已经存在但具有不同的值，则后面设置的值会覆盖先前设置的值；\u003C\u002Fli\u003E\n\u003Cli\u003E一个镜像中可以有多个标签。您可以在一行上指定多个标签。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E# 基础镜像\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine AS openjdk8\n\u003Cspan class=\"hljs-comment\"\u003E# 维护者信息\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ELABEL\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E maintainer=\u003Cspan class=\"hljs-string\"\u003E&quot;liwenqiang@tseveryday.com&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 多标签：标记版本号及描述信息，\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ELABEL\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E version=\u003Cspan class=\"hljs-string\"\u003E&quot;1.0&quot;\u003C\u002Fspan\u003E description=\u003Cspan class=\"hljs-string\"\u003E&quot;This text illustrates \\\nthat label-values can span multiple lines.&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E使用\u003Ccode\u003Edocker inspect\u003C\u002Fcode\u003E命令查看image的labels\u003C\u002Fp\u003E\n\u003Ch4\u003E示例执行结果说明：\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_ETqG.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003Cbr \u002F\u003E\n每个\u003Ccode\u003ELABEL\u003C\u002Fcode\u003E指令产生一个新层，如果使用许多标签，可能会导致效率低下。如果Docker遇到已经存在的label\u002Fkey，则新值将覆盖具有相同键的任何先前标签。\u003C\u002Fp\u003E\n\u003Ch2\u003EEXPOSE指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EEXPOSE\u003C\u002Fspan\u003E &lt;port&gt; [&lt;port&gt;\u002F&lt;protocol&gt;...]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EEXPOSE\u003C\u002Fcode\u003E指令通知Docker容器在运行时监听指定的网络端口，可以指定端口是侦听TCP还是UDP，如果未指定协议，则默认值为TCP。\u003C\u002Fp\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E无论\u003Ccode\u003EEXPOSE\u003C\u002Fcode\u003E设置如何，都可以在运行时使用\u003Ccode\u003E-p\u003C\u002Fcode\u003E参数覆盖它们，例如：docker run -p 8080:80；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EEXPOSE\u003C\u002Fcode\u003E 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会对外暴露这个端口，只有在\u003Ccode\u003Edocker run\u003C\u002Fcode\u003E 时显示指定 -p [外部端口]:[容器端口]，才会对外暴露。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E在 Dockerfile 中使用EXPOSE声明端口有两个好处：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；\u003C\u002Fli\u003E\n\u003Cli\u003E在运行时使用随机端口映射时，也就是 \u003Ccode\u003Edocker run -P\u003C\u002Fcode\u003E 时，会自动随机映射 \u003Ccode\u003EEXPOSE\u003C\u002Fcode\u003E 的端口。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2\u003EENV指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E设置一个：\u003Cspan class=\"hljs-keyword\"\u003EENV\u003C\u002Fspan\u003E &lt;key&gt; &lt;value&gt;\n设置多个：\u003Cspan class=\"hljs-keyword\"\u003EENV\u003C\u002Fspan\u003E &lt;key&gt;=&lt;value&gt; &lt;key1&gt;=&lt;value1&gt; ...\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EENV\u003C\u002Fcode\u003E指令将镜像运行时环境变量\u003Ccode\u003E&lt;key&gt;\u003C\u002Fcode\u003E设置为\u003Ccode\u003E&lt;value&gt;\u003C\u002Fcode\u003E。此值将在构建阶段中所有后续指令的环境中使用，并且在许多情况下也可以内联替换。\u003C\u002Fp\u003E\n\u003Cp\u003E可以通过命令：\u003Ccode\u003Edocker run -e &quot;key=value&quot;\u003C\u002Fcode\u003E来覆盖Dockerfile中的设置项的值。\u003C\u002Fp\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E设置一个时，第一个空格后面的整个字符串将被视为\u003Ccode\u003E&lt;value&gt;\u003C\u002Fcode\u003E 包括空格和引号等字符；\u003C\u002Fli\u003E\n\u003Cli\u003E设置多个时，这种形式在语法中使用&quot;=&quot;，与命令行解析一样，引号和反斜杠可用于在值内包含空格。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine\n\u003Cspan class=\"hljs-comment\"\u003E# 维护者信息\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ELABEL\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E maintainer=\u003Cspan class=\"hljs-string\"\u003E&quot;liwenqiang@tseveryday.com&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# Pointer a active profile\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EENV\u003C\u002Fspan\u003E JAR=demo VERSION=\u003Cspan class=\"hljs-number\"\u003E0.0\u003C\u002Fspan\u003E.\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E-RELEASE\n\u003Cspan class=\"hljs-comment\"\u003E# Run the jar file\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EENTRYPOINT\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;\u002Fbin\u002Fsh&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;-c&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;java -jar \u002Ftarget\u002F\u003Cspan class=\"hljs-variable\"\u003E${JAR}\u003C\u002Fspan\u003E-\u003Cspan class=\"hljs-variable\"\u003E${VERSION}\u003C\u002Fspan\u003E.jar&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E执行结果：\u003C\u002Fh4\u003E\n\u003Cp\u003E通过docker inspect 查看镜像信息：=\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_OQ7R.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003EADD指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EADD\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EADD\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [--chown=&lt;user&gt;:&lt;group&gt;] [\u003Cspan class=\"hljs-string\"\u003E&quot;&lt;src&gt;&quot;\u003C\u002Fspan\u003E,... \u003Cspan class=\"hljs-string\"\u003E&quot;&lt;dest&gt;&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E注：–chown 仅在用于在Linux上构建容器时的Dockerfile上可用，在Windows容器上不起作用\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EADD\u003C\u002Fcode\u003E指令是有上下文的（默认为当前Dockerfile所在目录），从Dockerfile文件相对的\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E路径下复制其下的文件\u002F文件夹到Docker镜像的工作目录下的相对的\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E目录。\u003C\u002Fp\u003E\n\u003Cp\u003E例如：linux的\u002Fhome\u002Fuser\u002Fsrc下执行Dockerfile构建镜像，要添加\u002Fhome\u002Fuser\u002Fsrc\u002Fdemo文件夹所有内容到docker镜像的\u002Fapp工作目录下，需要设置\u003Ccode\u003EADD . \u002Fapp\u002F\u003C\u002Fcode\u003E 。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E也可以为远程文件URL，当\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E是远程文件URL的情况下，目标将具有600的权限。如果正在检索的远程文件具有HTTP Last-Modified 的标头，则来自该标头的时间戳将用于设置目的地上的mtime文件，另外像在\u003Ccode\u003EADD\u003C\u002Fcode\u003E期间处理的任何其它文件一样，mtime将不包括在确定文件是否已经改变并且高速缓存应该被更新。\u003C\u002Fp\u003E\n\u003Ch4\u003E规则：\u003C\u002Fh4\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E路径必须在构建的上下文中，不能\u003Ccode\u003EADD ..\u002Fsomething \u002Ftarget\u003C\u002Fcode\u003E，因为docker构建的第一步是发送上下文目录（和子目录）到docker守护进程。\u003C\u002Fli\u003E\n\u003Cli\u003E如果\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E是URL并且\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E不以尾部斜杠结尾，则从URL下载文件并将其复制到\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E。\u003C\u002Fli\u003E\n\u003Cli\u003E如果\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E是URL并且\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E以尾部斜杠结尾，则从URL中推断文件名，并将文件下载到\u003Ccode\u003E&lt;dest&gt;\u002F&lt;filename&gt;\u003C\u002Fcode\u003E。例如，\u003Ccode\u003EADD http:\u002F\u002Fexample.com\u002Ffoobar \u002F\u003C\u002Fcode\u003E会创建文件\u002Ffoobar。网址必须有一个非平凡的路径，以便在这种情况下可以发现一个适当的文件名（\u003Ca href=\"http:\u002F\u002Fexample.xn--com-928d31cllg28f\"\u003Ehttp:\u002F\u002Fexample.com不会工作\u003C\u002Fa\u003E）。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E资源可以指定多个，但如果指定的是文件或目录，会被解析为基于镜像上下文的相对路径。\u003C\u002Fli\u003E\n\u003Cli\u003E如果\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E是目录，则复制目录的整个内容，包括文件系统元数据。\u003C\u002Fli\u003E\n\u003Cli\u003E如果URL文件使用身份验证保护，则需要使用\u003Ccode\u003ERUN wget\u003C\u002Fcode\u003E，\u003Ccode\u003ERUN curl\u003C\u002Fcode\u003E或从容器内使用其他工具，因为\u003Ccode\u003EADD\u003C\u002Fcode\u003E指令不支持身份验证。\u003C\u002Fli\u003E\n\u003Cli\u003E在Dockerfile构建镜像时使用\u003Ccode\u003Edocker build - &lt;somefile\u003C\u002Fcode\u003E构建，这时没有构建上下文，所以Dockerfile只能包含一个基于URL的\u003Ccode\u003EADD\u003C\u002Fcode\u003E指令。\u003C\u002Fli\u003E\n\u003Cli\u003E可以通过命令传递压缩归档文件：\u003Ccode\u003Edocker build - &lt;archive.tar.gz\u003C\u002Fcode\u003E，归档根目录下的Dockerfile和归档的其余部分将在构建的上下文中使用。\u003C\u002Fli\u003E\n\u003Cli\u003E如果\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E是识别的压缩格式（identity，gzip，bzip2或xz）的本地tar存档，则将其解包为目录（识别是基于文件内容的而不是文件名，例如文件名是demo.tar.gz，但是文件是空的，就不会去解压）。来自远程URL的资源不会解压缩。\u003C\u002Fli\u003E\n\u003Cli\u003E如果直接或由于使用通配符指定了多个\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E资源，则\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E必须是目录，并且必须以斜杠\u002F结尾。\u003C\u002Fli\u003E\n\u003Cli\u003E如果\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E不以尾部斜杠结尾，它将被视为常规文件，\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E的内容将写在\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E。\u003C\u002Fli\u003E\n\u003Cli\u003E如果\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E不存在，则会与其路径中的所有缺少的目录一起创建。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E# 设置基础镜像\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine\n\u003Cspan class=\"hljs-comment\"\u003E# 复制jar包到镜像中\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EADD\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E https:\u002F\u002Foss.abeille.top\u002Fdemo-0.0.1-SNAPSHOT.jar .\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 容器启动时执行的指令\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EENTRYPOINT\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;\u002Fbin\u002Fsh&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;-c&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;java -jar demo-0.0.1-SNAPSHOT.jar&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E执行结果：\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_L3Ty.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E通过结果可以看到，镜像在构建过程中会把远程地址的文件下载并写入镜像的上下文的根目录 . 中，构建完成之后启动镜像验证结果，结果打印了正常的服务日志，说明构建的镜像是可以使用的。\u003C\u002Fp\u003E\n\u003Ch2\u003ECOPY指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003ECOPY\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ECOPY\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [--chown=&lt;user&gt;:&lt;group&gt;] [\u003Cspan class=\"hljs-string\"\u003E&quot;&lt;src&gt;&quot;\u003C\u002Fspan\u003E,... \u003Cspan class=\"hljs-string\"\u003E&quot;&lt;dest&gt;&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E注：–chown仅在用于在Linux上构建容器时的Dockerfile上可用，在Windows容器上不起作用\u003Cbr \u002F\u003E\n–chown标志指定给定的用户名，组名或UID \u002F GID组合以请求对复制内容的特定所有权\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003ECOPY\u003C\u002Fcode\u003E 指令复制\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E所指向的文件或目录，将它添加到新镜像中，复制的文件或目录在镜像中的路径是\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E。\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E所指定的源可以有多个，但必须在上下文中，即必须是上下文根目录的相对路径。\u003C\u002Fp\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E可以使用通配符指向所有匹配通配符的文件或目录；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E可以是文件或目录，但是必须是目标镜像中的绝对路径或者相对于WORKDIR 的相对路径；\u003C\u002Fli\u003E\n\u003Cli\u003E若\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E或\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E以斜杠\u002F结尾，则其指向的是目录，否则指向文件。\u003C\u002Fli\u003E\n\u003Cli\u003E若\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E是一个文件，则\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E的内容会被写入到\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E中，否则\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E所指向的文件或目录中的内容会被复制添加到\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E目录中。\u003C\u002Fli\u003E\n\u003Cli\u003E当\u003Ccode\u003E&lt;src&gt;\u003C\u002Fcode\u003E指定多个源时，\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E必须是目录，如果\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E不存在，则会被创建。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E# 设置基础镜像\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine\n\u003Cspan class=\"hljs-comment\"\u003E# 复制jar包到镜像中\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ECOPY\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E \u002Ftarget\u002Fdemo-0.0.1-SNAPSHOT.jar .\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 容器启动时执行的指令\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EENTRYPOINT\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;\u002Fbin\u002Fsh&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;-c&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;java -jar demo-0.0.1-SNAPSHOT.jar&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E示例执行结果说明：\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_N9qn.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E上图是执行结果可以看到，在指定的路径下文件不存在时，会打印异常信息，且构建过程会终止但是之前执行的步骤生成的镜像还是会在docker daemon缓存中存在。这是因为\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E不是以斜杠结尾，所以就会把demo.jar 写入到\u003Ccode\u003E&lt;dest&gt;\u003C\u002Fcode\u003E，但是这个demo.jar又不存在，所以写入的时候发生异常。\u003C\u002Fp\u003E\n\u003Cp\u003E修改示例为正确路径文件后，在执行构建，并运行镜像，就会打印服务启动的日志。\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104310_DYtd.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003EENTRYPOINT指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003Eexec格式：\u003Cspan class=\"hljs-keyword\"\u003EENTRYPOINT\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;executable&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;param1&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;param2&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eshell\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E格式：ENTRYPOINT \u003Cspan class=\"hljs-built_in\"\u003Ecommand\u003C\u002Fspan\u003E param1 param2\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E指令和 \u003Ccode\u003ECMD\u003C\u002Fcode\u003E 相似，都可以让容器在每次启动时执行相同的命令，但是又有不同的地方，\u003Ccode\u003ECMD\u003C\u002Fcode\u003E可以是命令，也可以是参数，而\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E只能是命令。\u003C\u002Fp\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E在使用shell格式时，\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E指令会忽略所有的\u003Ccode\u003ECMD\u003C\u002Fcode\u003E指令和docker run 命令的参数，并且会运行在 \u002Fbin\u002Fsh -c 中，这就说明\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E指令进程为 \u002Fbin\u002Fsh -c 的子进程，进程在容器中的PID不是1，且不接受Unix信号，即在使用docker stop 命令时，命令进程接收不到SIGTERM信号；\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 \u003Ccode\u003Edocker run --entrypoint\u003C\u002Fcode\u003E来指定；\u003C\u002Fli\u003E\n\u003Cli\u003E当指定了 \u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E 后，\u003Ccode\u003ECMD\u003C\u002Fcode\u003E 的含义就发生了改变，不再是直接的运行其命令，而是将 \u003Ccode\u003ECMD\u003C\u002Fcode\u003E 的内容作为参数传给 \u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E 指令；\u003C\u002Fli\u003E\n\u003Cli\u003E在一个Dockerfile 中可以有多条\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E指令，但是只有最后一条有效；\u003C\u002Fli\u003E\n\u003Cli\u003E使用exec格式时，\u003Ccode\u003Edocker run\u003C\u002Fcode\u003E 传入的命令会覆盖CMD指令的内容并且附加到\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E指令的参数中，而不会覆盖\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E指令的参数。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine\n\u003Cspan class=\"hljs-comment\"\u003E# 复制jar包到镜像中\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EADD\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E \u002Ftarget\u002Fdemo-0.0.1-SNAPSHOT.jar .\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E# 容器启动时执行的指令\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EENTRYPOINT\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;\u002Fbin\u002Fsh&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;-c&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;java -jar demo-0.1.0-SNAPSHOT.jar&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EENTRYPOINT\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;\u002Fbin\u002Fsh&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;-c&quot;\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-string\"\u003E&quot;java -jar demo-0.0.1-SNAPSHOT.jar&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E示例执行结果说明：\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104311_NbWg.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E通过构建过成可以看到，在构建时，并不会执行\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E的命令，当我们启动镜像时才会执行其中的ENTRYPOINT，虽然设置了两个\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E指令，但是只执行了\u003Ccode\u003Ejava -jar demo-0.0.1-SNAPSHOT.jar\u003C\u002Fcode\u003E命令来启动服务，因为 demo-0.1.0-SNAPSHOT.jar 这个并不存在，如果会执行第一个\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E的话，启动一个不存在的jar肯定是会发生异常。这也印证了使用说明中的第4条。\u003C\u002Fp\u003E\n\u003Ch2\u003EVOLUME指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EVOLUME\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [\u003Cspan class=\"hljs-string\"\u003E&quot;\u002Fdata&quot;\u003C\u002Fspan\u003E]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EVOLUME\u003C\u002Fcode\u003E指令创建具有指定名称的挂载点，并将其标记为从本机主机或其他容器保留外部挂载的卷。该值可以是JSON数组VOLUME [“\u002Fvar\u002Flog\u002F”]或具有多个参数的纯字符串。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。\u003C\u002Fp\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E基于Windows的容器上的卷：使用基于Windows的容器时，容器内的卷的目表地址必须是不存在或空目录，并且不能是 C 盘下的目录。\u003C\u002Fli\u003E\n\u003Cli\u003E主机目录是在容器运行时声明的：主机目录（挂载点）从本质上说是依赖于主机的。这是为了保留镜像的可移植性，因为不能保证给定的主机目录在所有主机上都可用。因此，无法从Dockerfile内挂载主机目录。该\u003Ccode\u003EVOLUME\u003C\u002Fcode\u003E指令不支持指定host-dir 参数。创建或运行容器时，必须指定安装点。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine\n\u003Cspan class=\"hljs-keyword\"\u003EVOLUME\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E \u002Fdata\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E示例执行结果说明：\u003C\u002Fh4\u003E\n\u003Ch4\u003E疑问：\u003C\u002Fh4\u003E\n\u003Cp\u003EDockerfile 中有一个 \u003Ccode\u003EVOLUME\u003C\u002Fcode\u003E 命令，可以把挂载一个目录到主机目录，但是在主机目录下的名字是随机的，除非用户用 -v 指定，但是如果在 Dockerfile 中不用 \u003Ccode\u003EVOLUME\u003C\u002Fcode\u003E，只在运行时用 -v 指定也能达到效果，那么就有一个问题，\u003Ccode\u003EVOLUME\u003C\u002Fcode\u003E 在 Dockerfile 中到底有多少用，在 Host 下创建了几个用户一般找不到的文件到底有多少使用价值，大部分情况下用户都是要手动使用 -v 重新指定挂载目录，那 \u003Ccode\u003EVOLUME\u003C\u002Fcode\u003E 命令就显得很鸡肋。\u003C\u002Fp\u003E\n\u003Ch4\u003E解释：\u003C\u002Fh4\u003E\n\u003Cp\u003E可以把\u003Ccode\u003EVOLUME\u003C\u002Fcode\u003E理解为，从镜像中复制指定卷的文件夹到本地 \u002Fvar\u002Flib\u002Fdocker\u002Fvolumes\u002Fxxxxxxxxx\u002F 文件夹，然后把本地的该文件夹挂载到容器里面去。\u003C\u002Fp\u003E\n\u003Cp\u003E因为VOLUME实际上就是在本地新建了一个文件夹挂载了，那么实际上容器内部的文件夹有三种情况：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E没有指定\u003Ccode\u003EVOLUME\u003C\u002Fcode\u003E也没有指定\u003Ccode\u003E-v\u003C\u002Fcode\u003E，这种是普通文件夹。\u003C\u002Fli\u003E\n\u003Cli\u003E指定了\u003Ccode\u003EVOLUME\u003C\u002Fcode\u003E没有指定\u003Ccode\u003E-v\u003C\u002Fcode\u003E，这种文件夹可以在不同容器之间共享，但是无法在本地修改。\u003C\u002Fli\u003E\n\u003Cli\u003E指定了\u003Ccode\u003E-v\u003C\u002Fcode\u003E的文件夹，这种文件夹可以在不同容器之间共享，且可以在本地修改。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2\u003EUSER指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EUSER\u003C\u002Fspan\u003E &lt;\u003Cspan class=\"hljs-keyword\"\u003Euser\u003C\u002Fspan\u003E&gt;[:&lt;group&gt;]\n\u003Cspan class=\"hljs-keyword\"\u003EUSER\u003C\u002Fspan\u003E &lt;UID&gt;[:&lt;GID&gt;]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E指定运行容器时的用户名或 UID，后续的 \u003Ccode\u003ERUN\u003C\u002Fcode\u003E 也会使用指定用户。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。\u003C\u002Fp\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E在Windows上，如果不是内置帐户，则必须首先创建用户。这可以通过\u003Ccode\u003Enet user\u003C\u002Fcode\u003E作为Dockerfile的一部分调用的命令来完成。\u003C\u002Fli\u003E\n\u003Cli\u003E当用户没有主要组时，镜像（或后续说明）将与该root组一起运行。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003ERUN\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E groupadd -r dev &amp;&amp; useradd -r -g dev dev\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EUSER\u003C\u002Fspan\u003E dev\n\u003Cspan class=\"hljs-keyword\"\u003ERUN\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E [ \u003Cspan class=\"hljs-string\"\u003E&quot;systemctl start elasticsearch&quot;\u003C\u002Fspan\u003E ]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2\u003EWORKDIR指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EWORKDIR\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E \u002Fpath\u002Fto\u002Fworkdir\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E为后续的 \u003Ccode\u003ERUN\u003C\u002Fcode\u003E、\u003Ccode\u003ECMD\u003C\u002Fcode\u003E、\u003Ccode\u003EENTRYPOINT\u003C\u002Fcode\u003E 指令配置工作目录，在\u003Ccode\u003EWORKDIR\u003C\u002Fcode\u003E指令之前执行的指令，由于没有设置\u003Ccode\u003EWORKDIR\u003C\u002Fcode\u003E，它默认为当前镜像构建的上下文根目录，所以会基于根目录执行。\u003C\u002Fp\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003EWORKDIR\u003C\u002Fcode\u003E指令可以解析先前使用ENV设置的环境变量。您只能使用在Dockerfile中显式设置的环境变量；\u003C\u002Fli\u003E\n\u003Cli\u003E可以使用多个 \u003Ccode\u003EWORKDIR\u003C\u002Fcode\u003E 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine\n\u003Cspan class=\"hljs-keyword\"\u003EWORKDIR\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E \u002Feveryday\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EWORKDIR\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E chain\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003ERUN\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E \u003Cspan class=\"hljs-built_in\"\u003Epwd\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch4\u003E示例执行结果说明：\u003C\u002Fh4\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fstatic.oschina.net\u002Fuploads\u002Fimg\u002F202101\u002F03104311_ea1H.jpg\" alt=\"image.png.gif\"/*tpa=https://www.leafage.top/posts/detail/image.png*/ \u002F\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003EARG指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EARG\u003C\u002Fspan\u003E &lt;name&gt;[=&lt;default value&gt;]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E构建参数和 \u003Ccode\u003EENV\u003C\u002Fcode\u003E 的效果一样，都是设置环境变量。所不同的是，\u003Ccode\u003EARG\u003C\u002Fcode\u003E 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。通过 \u003Ccode\u003Edocker history\u003C\u002Fcode\u003E 可以看到所有设置的值。\u003C\u002Fp\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E不使用build-time变量来传递诸如github密钥，用户凭证等密码。构建时变量值使用docker history命令对图像的任何用户可见；\u003C\u002Fli\u003E\n\u003Cli\u003EARG 指令定义参数的默认值可以在 \u003Ccode\u003Edocker build\u003C\u002Fcode\u003E 中用 \u003Ccode\u003E--build-arg &lt;key&gt;=&lt;value&gt;\u003C\u002Fcode\u003E 来覆盖；\u003C\u002Fli\u003E\n\u003Cli\u003E在 1.13 之前的版本，要求 \u003Ccode\u003E--build-arg\u003C\u002Fcode\u003E 中的参数名，必须在 Dockerfile 中用 \u003Ccode\u003EARG\u003C\u002Fcode\u003E 定义过了，就是 \u003Ccode\u003E--build-arg\u003C\u002Fcode\u003E 指定的参数，必须在Dockerfile 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E构建示例：\u003C\u002Fh4\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EARG\u003C\u002Fspan\u003E VERSION=\u003Cspan class=\"hljs-number\"\u003E8\u003C\u002Fspan\u003E-jdk-alpine\n\u003Cspan class=\"hljs-comment\"\u003E# 基础镜像\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003EFROM\u003C\u002Fspan\u003E openjdk:$VERSION\n\u003Cspan class=\"hljs-keyword\"\u003EARG\u003C\u002Fspan\u003E VERSION\n\u003Cspan class=\"hljs-keyword\"\u003ERUN\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E \u003Cspan class=\"hljs-built_in\"\u003Eecho\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-variable\"\u003E$VERSION\u003C\u002Fspan\u003E &gt; java_version\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2\u003EONBUILD指令：\u003C\u002Fh2\u003E\n\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-keyword\"\u003EONBUILD\u003C\u002Fspan\u003E [INSTRUCTION]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E\u003Ccode\u003EONBUILD\u003C\u002Fcode\u003E 是一个特殊的指令，它的功能时添加一个将来执行的触发器指令到镜像中，它后面跟的是其它指令，比如 \u003Ccode\u003ERUN\u003C\u002Fcode\u003E, \u003Ccode\u003ECOPY\u003C\u002Fcode\u003E 等，而这些指令，在当前镜像构建时并不会被执行，当该镜像作为\u003Ccode\u003EFROM\u003C\u002Fcode\u003E指令的参数时， 这些触发器指令就会在\u003Ccode\u003EFROM\u003C\u002Fcode\u003E指令执行时加入到构建中。当需要构建一个基础镜像时，\u003Ccode\u003EONBUILD\u003C\u002Fcode\u003E是很有用的。\u003C\u002Fp\u003E\n\u003Ch4\u003EONBUILD指令具体执行步骤：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E在构建过程中，ONBUILD指令会添加到触发器指令镜像的云数据中，这些触发器不会再当前构建中执行；\u003C\u002Fli\u003E\n\u003Cli\u003E在构建过程最后，触发器指令会被存储在镜像详情中，其主键是OnBuild，可以使用docker inspect命令查看；\u003C\u002Fli\u003E\n\u003Cli\u003E构建完成后，该镜像可能作为其他Dockerfile中的\u003Ccode\u003EFROM\u003C\u002Fcode\u003E指令的参数，在构建时\u003Ccode\u003EFROM\u003C\u002Fcode\u003E指令会寻找\u003Ccode\u003EONBUILD\u003C\u002Fcode\u003E触发器指令，并且会以它们注册的顺序执行。如果有触发器执行失败，则\u003Ccode\u003EFROM\u003C\u002Fcode\u003E指令被中止，并返回失败；如果所有的触发器执行成功，则\u003Ccode\u003EFROM\u003C\u002Fcode\u003E会执行下面的命令。在镜像构建完成后，触发器会被清除，不会被子孙镜像继承。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E使用说明：\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ccode\u003EONBUILD\u003C\u002Fcode\u003E指令中不能包含 \u003Ccode\u003EONBUILD\u003C\u002Fcode\u003E指令，并且不会触发\u003Ccode\u003EFROM\u003C\u002Fcode\u003E指令；\u003C\u002Fli\u003E\n\u003Cli\u003E使用\u003Ccode\u003EONBUILD\u003C\u002Fcode\u003E指令的Dockerfile构建的镜像应该有特殊的标签，例如：demo:1.1.0-onbuild，这样做的好处是提示开发人员要在使用时注意；\u003C\u002Fli\u003E\n\u003Cli\u003E在\u003Ccode\u003EONBUILD\u003C\u002Fcode\u003E指令中添加\u003Ccode\u003EADD\u003C\u002Fcode\u003E和\u003Ccode\u003ECOPY\u003C\u002Fcode\u003E指令时要特别注意，假如新构建过程的被添加的资源缺失了，会导致构建失败；\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n"}],fetch:{"SideBar:0":{datas:[{code:l,modifyTime:m,title:n,subtitle:o,cover:p,tags:[q,r,s,t,u,v],category:b,likes:w,comment:a,viewed:x},{code:y,modifyTime:z,title:A,subtitle:B,cover:C,tags:[e,f,g,d,D],category:b,likes:E,comment:a,viewed:F},{code:G,modifyTime:H,title:I,subtitle:J,cover:K,tags:[d,L,M,N,O],category:b,likes:P,comment:a,viewed:Q},{code:"2129YYQ4",modifyTime:"2021-04-20T14:46:54.746",title:"prometheus和grafana服务监控系统",subtitle:"Prometheus内置了一个强大的数据查询语言PromQL。 通过PromQL可以实现对监控数据的查询、聚合。同时PromQL",cover:"https:\u002F\u002Fcdn.leafage.top\u002Fwoman-1919143_640.jpg",tags:["prometheus","grafana","监控","运维","微服务"],category:b,likes:6,comment:a,viewed:427},{code:"20829TXGD",modifyTime:"2021-04-28T21:18:44.491",title:"spring security 学习和踩坑总结（表单）",subtitle:"本篇将介绍如何进行自定义的一些配置来实现自定义的登录，包括从数据库查用户信息等",cover:"https:\u002F\u002Fcdn.leafage.top\u002Fsecurity-265130_640.jpg",tags:[e,f,d,g],category:b,likes:a,comment:a,viewed:370}],categories:[{code:"20C3ID6W",modifyTime:"2020-12-03T15:06:50",alias:b,count:14,description:c},{code:"20C329QX",modifyTime:"2020-12-03T15:08:01",alias:"Lifestyle",count:R,description:c},{code:"2128O0TW",modifyTime:"2021-02-08T15:14:56.769",alias:"Travel",count:a,description:c},{code:"21317DTNP",modifyTime:"2021-03-17T08:44:31.446",alias:"Experience",count:R,description:c},{code:"21412YAAR",modifyTime:"2021-04-12T12:47:14.065",alias:"Photograph",count:a,description:"摄影"}]}},error:c,state:{code:h,title:i,keywords:k,description:j},serverRendered:true,routePath:"\u002Fposts\u002Fdetail\u002F21525V8AP",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:c}}}}(0,"Technology",null,"java","spring","security","form","21525V8AP","Dockerfile 指令学习总结","Dockerfile 描述了组装镜像的步骤，其中每条指令都是单独执行的。除了FROM指令，其他每一条指令都会在上一条指令所生成镜像的基础上执行，执行完后会生成一个新的镜像层，新的镜像层覆盖在原来的镜像",Array(3),"20815YW6T","2021-04-10T11:45:57.04","Mybatis批量操作sql写法","使用mybatis时，如何自定义实现批量操作数据，SQL如何编写，其中需要注意的点有哪些","https:\u002F\u002Fcdn.leafage.top\u002Fdata-4404730_640.jpg","mybatis","sql","batch","批量","insert","update",10,633,"208291JMJ","2021-04-10T11:32:35.069","spring security 学习和踩坑总结（入门）","spring security 是个很强大的框架，但是网上没有一个完整的对于它的一个分析，或者使用的说明，本文将一步步的对其进行使用和分析做出说明","https:\u002F\u002Fcdn.leafage.top\u002Fsecurity-869216_640.jpg","登录",2,499,"20824ZB0N","2021-02-02T16:28:43.759","一步步带你实现redis分布式锁","在开发过程中，那面遇到一些场景，需要实现锁，现在大都是分布式方案，那么分布式下如何实现锁","https:\u002F\u002Fcdn.leafage.top\u002Fpassword-2781614_640.jpg","redis","分布式","锁","缓存",7,459,1));</script><script src="2dcea8e.js" tppabs="https://www.leafage.top/_nuxt/2dcea8e.js" defer></script><script src="6c4e3a2.js" tppabs="https://www.leafage.top/_nuxt/6c4e3a2.js" defer></script><script src="1318273.js" tppabs="https://www.leafage.top/_nuxt/1318273.js" defer></script><script src="6a18bf6.js" tppabs="https://www.leafage.top/_nuxt/6a18bf6.js" defer></script><script src="b1b6c93.js" tppabs="https://www.leafage.top/_nuxt/b1b6c93.js" defer></script><script src="5f999ff.js" tppabs="https://www.leafage.top/_nuxt/5f999ff.js" defer></script>
  </body>
</html>
